{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"aequos Modern Data Visualizer solution \u00b6 The 'Modern Data Visualizer' solution is a set of SharePoint Online modern Web Parts allowing SharePoint super users, webmasters and developers to create highly flexible and personalized data viewing and filtering experiences in minutes. It is the enhanced product version of the well known \"Pattern & Practices Modern Search\" open-source solution that we also created . Refer to out website to see differences between the two solutions. Don't be wrong: we still continue to invest time and support for the open-source solution . If it suits your current requirement, feel free to go with it. We will never push someone to purchase the licensed solution. It is completely up to you. What's included? \u00b6 The solution includes the following Web Parts: Component Description Data Visualizer Retrieve data from a data source and render them in a specific layout. Data Filters Filter and refine data displayed in 'Data Visualizer' Web Parts. Data Verticals Browse data as silos (i.e. tabs) from multiple data sources. Search box Let users enter free text queries sent to 'Data Visualizer' Web Parts. Overview video: let's build a complete search center Here is a overview video on how to build a complete search center in minutes using all available Web Parts whithin a SharePoint page including multiple data sources. Supported browsers \u00b6 Here is the list of supported browsers: Chrome Firefox Edge Edge Chromium Brave We don't support Internet Explorer 11 . We think there are plenty of other options for enteprise scenarios in the market. Maybe it's time to move on. For developers, it represents an huge ammount of time to make the solution compatible for a very low benefit. Hope you understand, ain't personal ;). Extensibility model \u00b6 By getting this solution, you also benefit from an advanced extensibility model allowing you to customize the solution according to your requirements if default features don't do the job for you. The supported extensions are: Custom data sources . Custom layouts . Custom web components . Custom suggestions providers . Custom Handlebars customization (helpers, partials, etc.) . With these available customizations options, you can do pretty much anything! Troubleshooting \u00b6 To help us to resolve your issue, you can include screenshots or error messages coming from: The faulty Web Part itself. Errors displayed in the browser console (typically pressing F12). Errors displayed in the SharePoint console (pressing CTRL+F12) Issues, questions, feedback? \u00b6 For any issue, question or feedback, please the official GitHub repository . We will be happy to help you!","title":"Introduction"},{"location":"#aequos-modern-data-visualizer-solution","text":"The 'Modern Data Visualizer' solution is a set of SharePoint Online modern Web Parts allowing SharePoint super users, webmasters and developers to create highly flexible and personalized data viewing and filtering experiences in minutes. It is the enhanced product version of the well known \"Pattern & Practices Modern Search\" open-source solution that we also created . Refer to out website to see differences between the two solutions. Don't be wrong: we still continue to invest time and support for the open-source solution . If it suits your current requirement, feel free to go with it. We will never push someone to purchase the licensed solution. It is completely up to you.","title":"aequos Modern Data Visualizer solution"},{"location":"#whats-included","text":"The solution includes the following Web Parts: Component Description Data Visualizer Retrieve data from a data source and render them in a specific layout. Data Filters Filter and refine data displayed in 'Data Visualizer' Web Parts. Data Verticals Browse data as silos (i.e. tabs) from multiple data sources. Search box Let users enter free text queries sent to 'Data Visualizer' Web Parts. Overview video: let's build a complete search center Here is a overview video on how to build a complete search center in minutes using all available Web Parts whithin a SharePoint page including multiple data sources.","title":"What's included?"},{"location":"#supported-browsers","text":"Here is the list of supported browsers: Chrome Firefox Edge Edge Chromium Brave We don't support Internet Explorer 11 . We think there are plenty of other options for enteprise scenarios in the market. Maybe it's time to move on. For developers, it represents an huge ammount of time to make the solution compatible for a very low benefit. Hope you understand, ain't personal ;).","title":"Supported browsers"},{"location":"#extensibility-model","text":"By getting this solution, you also benefit from an advanced extensibility model allowing you to customize the solution according to your requirements if default features don't do the job for you. The supported extensions are: Custom data sources . Custom layouts . Custom web components . Custom suggestions providers . Custom Handlebars customization (helpers, partials, etc.) . With these available customizations options, you can do pretty much anything!","title":"Extensibility model"},{"location":"#troubleshooting","text":"To help us to resolve your issue, you can include screenshots or error messages coming from: The faulty Web Part itself. Errors displayed in the browser console (typically pressing F12). Errors displayed in the SharePoint console (pressing CTRL+F12)","title":"Troubleshooting"},{"location":"#issues-questions-feedback","text":"For any issue, question or feedback, please the official GitHub repository . We will be happy to help you!","title":"Issues, questions, feedback?"},{"location":"installation/","text":"Installation \u00b6 Download the latest SharePoint Framework package ( aequos-modern-data-visualizer.sppkg ) from our public GitHub repository . Add the package to your global app catalog or site collection app catalog. If you don't have an app catalog, follow this procedure to create one. The solution is deployed in the general Office 365 CDN meaning we don't host any code on our side . You can choose to make the solution available in all sites or force to install an app to the site every time. The solution asks the following API permissions by defailt to enhance the experience. These permissions are not mandatory . If you don't accept them, you will simpy have less available features. Requested API permission Used for User.Read The Microsoft Graph Toolkit persona card in the people layout. People.Read Same as above. Contacts.Read Same as above. User.ReadBAsic.All Same as above. Get a valid license from our website . Register the Office 365 tenant ID where you want to use this solution . If you don't know how to get your tenant ID, you can refer to this procedure If you chose a standalone license, you must follow these additional steps . Add the Web Parts to a SharePoint and start building! Get your Office 365 tenant ID \u00b6 To get your Office 365 tenant unique ID, you can: Follow this procedure OR Download , deploy and use Web Parts without license and get the tenant ID from the error message or in the third Web Part configuration page:","title":"Installation"},{"location":"installation/#installation","text":"Download the latest SharePoint Framework package ( aequos-modern-data-visualizer.sppkg ) from our public GitHub repository . Add the package to your global app catalog or site collection app catalog. If you don't have an app catalog, follow this procedure to create one. The solution is deployed in the general Office 365 CDN meaning we don't host any code on our side . You can choose to make the solution available in all sites or force to install an app to the site every time. The solution asks the following API permissions by defailt to enhance the experience. These permissions are not mandatory . If you don't accept them, you will simpy have less available features. Requested API permission Used for User.Read The Microsoft Graph Toolkit persona card in the people layout. People.Read Same as above. Contacts.Read Same as above. User.ReadBAsic.All Same as above. Get a valid license from our website . Register the Office 365 tenant ID where you want to use this solution . If you don't know how to get your tenant ID, you can refer to this procedure If you chose a standalone license, you must follow these additional steps . Add the Web Parts to a SharePoint and start building!","title":"Installation"},{"location":"installation/#get-your-office-365-tenant-id","text":"To get your Office 365 tenant unique ID, you can: Follow this procedure OR Download , deploy and use Web Parts without license and get the tenant ID from the error message or in the third Web Part configuration page:","title":"Get your Office 365 tenant ID"},{"location":"setup_standalone/","text":"Setup your standalone license \u00b6 To setup a standalone license, follow this procedure: On a remote machine that have acces to your Office 365 environment, install Office 365 CLI as an administrator: npm i -g @pnp/office365-cli Connect to Office 365 using the following command and and SharePoint administrator account. o365$ login Create a new tenant property named AEQUOS_DATAVISUALIZER_LICENSE_KEY with, as value, the key you received by email after your purchase: spo storageentity set -k AEQUOS_DATAVISUALIZER_LICENSE_KEY -v <your_key> -d 'aequos Data Visualizer solution license key' -u https://contoso.sharepoint.com/sites/appcatalog In the URL, you must specify the address of the global app catalog in your tenant. If you don't have an app catalog, follow this procedure to create one. To remove an existing key, use the following command: spo storageentity remove -k AEQUOS_DATAVISUALIZER_LICENSE_KEY -u https://contoso.sharepoint.com/sites/appcatalog With a standalone license, our license validation check endpoint won't be hit . The validation is done in-place.","title":"Activate a standalone license"},{"location":"setup_standalone/#setup-your-standalone-license","text":"To setup a standalone license, follow this procedure: On a remote machine that have acces to your Office 365 environment, install Office 365 CLI as an administrator: npm i -g @pnp/office365-cli Connect to Office 365 using the following command and and SharePoint administrator account. o365$ login Create a new tenant property named AEQUOS_DATAVISUALIZER_LICENSE_KEY with, as value, the key you received by email after your purchase: spo storageentity set -k AEQUOS_DATAVISUALIZER_LICENSE_KEY -v <your_key> -d 'aequos Data Visualizer solution license key' -u https://contoso.sharepoint.com/sites/appcatalog In the URL, you must specify the address of the global app catalog in your tenant. If you don't have an app catalog, follow this procedure to create one. To remove an existing key, use the following command: spo storageentity remove -k AEQUOS_DATAVISUALIZER_LICENSE_KEY -u https://contoso.sharepoint.com/sites/appcatalog With a standalone license, our license validation check endpoint won't be hit . The validation is done in-place.","title":"Setup your standalone license"},{"location":"extensibility/","text":"Extensibility possibilities \u00b6 This solution supports different levels of customizations depending your requirements: 'Basic' customizations : these include custom settings for data sources, search box, verticals and filters Web Parts + minor updates to existing layouts by adding custom HTML markup (ex: add a custom field in the UI from a data source), updates to builtin layouts fields ('Cards','Details List' and 'People'), etc. They only require HTML, CSS and Handlebars skills to be done . Typically a super user or a webmaster could do that. 'Advanced' customizations : these include major updates like adding a new data source, layout, component or suggestions provider. These are build from scratch and require SharePoint Framework development skills to be done . Typically, a front-end/SharePoint developer could do that. Basic customizations \u00b6 'Basic' customizations cover the layout templates updates with HTML, CSS and Handlebars. Refer to the templating documentation to know more. Advanced customizations \u00b6 The solution uses the concept of 'extensibility libraries' . Basically, these are SharePoint Framework library components you put in the global or site collection app catalog that will be loaded automatically by Web Parts to enhance the experience and options (ex: new data source with new options, custom layout, etc.). Simple as that! As a demonstration of capabilities, all builtin data sources, layouts, web components or suggestions providers are built using the same exact interfaces and methods that are publically available in the @aequos/extensibility npm package. We took no shortcuts or cheats whatsoever in our code so you could theorically get the same output! All documentation procedures for extensions are based on the demo extensibility library available in the GitHub repository that you can use as reference. Prerequistes \u00b6 For your project to be a valid extensibility library, you must have the following prerequisites: Your project must be an SPFx library component . The main entry point of your library must implement the IExtensibilityLibrary interface from the '@aequos/extensibility' npm public package . You library manifest ID must be registered in the Web Part where you want to use the extension. Supported extensions \u00b6 Each Web Part type in the solution supports several extensions or no extension at all. It means even your extensibility library contains all possible extensions, they won't be loaded if the Web Part does not support them. Web Part type Supported extensions Data Visualizer Custom data sources. Custom layouts. Custom web components. Custom Handlebars customizations (ex: helpers, partials ,etc.). Data Filters Custom web components ( not directly but via the 'Data Visualizer' Web Part extensibility library registration ). Search box Custom suggestions providers. Data Verticals None. Register your extensibility library with a Web Part \u00b6 When a Web Part type supports one or multiple extensions, you can register them going to the last property pane confguration page in the 'Extensibility configuration' section: From here, you can add the manifest IDs of your libraries and decide to enable or disabled certain libraries. The manifest ID can be found in the <your_library_name>.manifest.json file: Multiple librairies can be registred for a single Web Part instance allowing you to split your extensions into multiple projects (in the end, they will be all concatenated). For instance, this could be convenient when extensions come from different IT providers. Create an extensibility library \u00b6 To create an extensibility library, you have the choice to reuse the one provided in the GitHub repository or start from scratch. In this case: Create a new SharePoint Framework project of type 'Library' with yo @microsoft/sharepoint . In your package.json add the '@aequos/extensibility' npm public package (latest) and run npm i . In the main entry point, implement the IExtensibilityLibrary interface. Provide all method implementations (return empty arrays if you don't implement specific extensions). Implement your extension(s) depending of the type: Data source Layout Web component Suggestions providers Handlebars customizations Creation process always follows more or less the same pattern: Create the extension data logic or render logic. Register the information about the extension to be discovered and instanciated by the target Web Part by implementing the corresponding method according to the IExtensibilityLibrary interface. Bundle gulp bundle --ship and package gulp package-solution --ship and add the solution to the global or site collection catalog (for this one, it must be the same site collection where the Web Part loading that extension(s) is present). Register your manifest ID in the target Web Part instance . Enjoy! Debug a library component \u00b6 Debugging a library component is exactly the same as debugging an SPFx Web Part. Run gulp serve in the hosted workbench and put a 'Data Visualizer' , 'Data Filters' or 'Search Box' Web Part depending the extension you want to test. If registered correctly, your breakpoints will be triggerred by the main Web Part loading your extension.","title":"Introduction"},{"location":"extensibility/#extensibility-possibilities","text":"This solution supports different levels of customizations depending your requirements: 'Basic' customizations : these include custom settings for data sources, search box, verticals and filters Web Parts + minor updates to existing layouts by adding custom HTML markup (ex: add a custom field in the UI from a data source), updates to builtin layouts fields ('Cards','Details List' and 'People'), etc. They only require HTML, CSS and Handlebars skills to be done . Typically a super user or a webmaster could do that. 'Advanced' customizations : these include major updates like adding a new data source, layout, component or suggestions provider. These are build from scratch and require SharePoint Framework development skills to be done . Typically, a front-end/SharePoint developer could do that.","title":"Extensibility possibilities"},{"location":"extensibility/#basic-customizations","text":"'Basic' customizations cover the layout templates updates with HTML, CSS and Handlebars. Refer to the templating documentation to know more.","title":"Basic customizations"},{"location":"extensibility/#advanced-customizations","text":"The solution uses the concept of 'extensibility libraries' . Basically, these are SharePoint Framework library components you put in the global or site collection app catalog that will be loaded automatically by Web Parts to enhance the experience and options (ex: new data source with new options, custom layout, etc.). Simple as that! As a demonstration of capabilities, all builtin data sources, layouts, web components or suggestions providers are built using the same exact interfaces and methods that are publically available in the @aequos/extensibility npm package. We took no shortcuts or cheats whatsoever in our code so you could theorically get the same output! All documentation procedures for extensions are based on the demo extensibility library available in the GitHub repository that you can use as reference.","title":"Advanced customizations"},{"location":"extensibility/#prerequistes","text":"For your project to be a valid extensibility library, you must have the following prerequisites: Your project must be an SPFx library component . The main entry point of your library must implement the IExtensibilityLibrary interface from the '@aequos/extensibility' npm public package . You library manifest ID must be registered in the Web Part where you want to use the extension.","title":"Prerequistes"},{"location":"extensibility/#supported-extensions","text":"Each Web Part type in the solution supports several extensions or no extension at all. It means even your extensibility library contains all possible extensions, they won't be loaded if the Web Part does not support them. Web Part type Supported extensions Data Visualizer Custom data sources. Custom layouts. Custom web components. Custom Handlebars customizations (ex: helpers, partials ,etc.). Data Filters Custom web components ( not directly but via the 'Data Visualizer' Web Part extensibility library registration ). Search box Custom suggestions providers. Data Verticals None.","title":"Supported extensions"},{"location":"extensibility/#register-your-extensibility-library-with-a-web-part","text":"When a Web Part type supports one or multiple extensions, you can register them going to the last property pane confguration page in the 'Extensibility configuration' section: From here, you can add the manifest IDs of your libraries and decide to enable or disabled certain libraries. The manifest ID can be found in the <your_library_name>.manifest.json file: Multiple librairies can be registred for a single Web Part instance allowing you to split your extensions into multiple projects (in the end, they will be all concatenated). For instance, this could be convenient when extensions come from different IT providers.","title":"Register your extensibility library with a Web Part"},{"location":"extensibility/#create-an-extensibility-library","text":"To create an extensibility library, you have the choice to reuse the one provided in the GitHub repository or start from scratch. In this case: Create a new SharePoint Framework project of type 'Library' with yo @microsoft/sharepoint . In your package.json add the '@aequos/extensibility' npm public package (latest) and run npm i . In the main entry point, implement the IExtensibilityLibrary interface. Provide all method implementations (return empty arrays if you don't implement specific extensions). Implement your extension(s) depending of the type: Data source Layout Web component Suggestions providers Handlebars customizations Creation process always follows more or less the same pattern: Create the extension data logic or render logic. Register the information about the extension to be discovered and instanciated by the target Web Part by implementing the corresponding method according to the IExtensibilityLibrary interface. Bundle gulp bundle --ship and package gulp package-solution --ship and add the solution to the global or site collection catalog (for this one, it must be the same site collection where the Web Part loading that extension(s) is present). Register your manifest ID in the target Web Part instance . Enjoy!","title":"Create an extensibility library"},{"location":"extensibility/#debug-a-library-component","text":"Debugging a library component is exactly the same as debugging an SPFx Web Part. Run gulp serve in the hosted workbench and put a 'Data Visualizer' , 'Data Filters' or 'Search Box' Web Part depending the extension you want to test. If registered correctly, your breakpoints will be triggerred by the main Web Part loading your extension.","title":"Debug a library component"},{"location":"extensibility/custom_data_source/","text":"Create a custom data source \u00b6 Data source creation process \u00b6 Data source creation process comes in two distinct steps: Create the data source itself (i.e. the logic to get data, etc.) . Register the data source information for discovery . Create the data source logic \u00b6 The first step is to create the core logic of the data source: In your extensibility library project, create a new MyDataSource.ts TypeScript file. Create an interface for your data source properties, typically the ones you want to persist in the Web Part property bag. Data source properties are isolated from the other general Web Part properties under the property dataSourceProperties in the property bag object. export interface ICustomDataSourceProperties { myProperty : string ; } Implement the BaseDataSource abstract class using your properties interface: export class CustomDataSource extends BaseDataSource < ICustomDataSourceProperties > { ... } Implement your data source logic according to the available methods and properties. BaseDataSource - Methods \u00b6 Method Description onInit() The initialization method of your data source (ex: initialize your properties, etc.). You can perform asynchronous calls here. This method will be called when the data source is instanciated by the main Web Part. getData() Probably the most important method in a data source. Returns the data of your data source, for instance, after an asynchronous call to your API. The data must follow the IDataSourceData interface. As input, you will receive all the data context with useful information to get your data (ex: the current selected page, current selected filters, etc.). getPropertyPaneGroupsConfiguration() Returns the property pane fields to display when your data source is selected. These are regular SPFx property fields and groups. Data source properties are isolated from the other general Web Part properties under the property dataSourceProperties . It means you must include that path in your property pane controls get the value persisted: . Defining fields or groups is not mandatory for a data source. If you don't want to expose any option, just return an empty array. getPagingBehavior() The paging behavior of the data source. If 'Dynamic' , the paging will be done using the pre-calculated paging.links array property returned by the data source. In this mode, this is your responsibility to populate these links (ex: using a @odata.nextLink information from your API). If 'Static' , the paging will be done statically based on the items array property returned by the data source. If 'None' , no paging will be performed. getFilterBehavior() The filter behavior of the data source. If 'Dynamic' , the available filters and values will be the ones returned by the data source in the filters array property. If 'Static' , the available filters and values will be determined using the current results set returned by the data source (using objects properties from the items array property). getAppliedFilters() If any, returns the list of filters (i.e data source fields) applied by the data source to filter results. Set this information in your data source is FilterType.Static but you still want filter initial result with 'Static' filters (like Taxonomy Picker and Date Range). These will be excluded by the main Web Part during the static filtering operation. If you forgot to set these values, data will be filtered statically using the current selected filters. getItemCount() Returns the total of items. This can be the items array length or the total of items in general. This information will be used to generate page numbers. getTemplateSlots() Returns the available template slots for this data source. More information about slots . onPropertyUpdate() The method will be called when a property pane value is updated. The main Web Part in Reactive mode for property pane fields. render() Call this method to force a render of the main Web Part. BaseDataSource - Properties \u00b6 Property Description properties The Web Part properties in the property bag. Corresponds to the isolated dataSourceProperties property in the global property bag. You won't be able to access any other general properties of the Web Part. context The Web Part context given by the main Web Part. serviceKeys The available service scope keys you can use to get shared service instances like the TokenService . Example: Using service scope to get service instances \u00b6 If your data source needs to use SPHttpClient , HttpClient , etc. services to retrieve data, you have multiple ways to get instances for these. Use the this.context property: const spHttpClient = this . context . spHttpClient ; OR Use the parent service scope to consume an existing instance: private spHttpClient : SPHttpClient ; constructor ( serviceScope : ServiceScope ) { super ( serviceScope ); serviceScope . whenFinished (() => { this . spHttpClient = serviceScope . consume ( SPHttpClient . serviceKey ); }); } We recommend to use the second approach especially if you also use shared instances like the TokenService . Register data source information \u00b6 The next step is to fill information about your new data source. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new IDataSourceDefinition object in the getCustomDataSources() method using these properties: Property Description name The friendly name of your data source that will show up in tiles. iconName An Office UI Fabric icon for your data source. key An unique internal key for your data source. serviceKey A service key used to instanciate your data source class. Builtin or custom data sources are instanciated dynamically using SPFx service scopes . public getCustomDataSources () : IDataSourceDefinition [] { return [ { name : 'My Custom Source' , iconName : 'Code' , key : 'CustomDataSource' , serviceKey : ServiceKey.create < IDataSource > ( 'MyCompany:CustomDataSource' , CustomDataSource ) }, ]; }","title":"Custom data source"},{"location":"extensibility/custom_data_source/#create-a-custom-data-source","text":"","title":"Create a custom data source"},{"location":"extensibility/custom_data_source/#data-source-creation-process","text":"Data source creation process comes in two distinct steps: Create the data source itself (i.e. the logic to get data, etc.) . Register the data source information for discovery .","title":"Data source creation process"},{"location":"extensibility/custom_data_source/#create-the-data-source-logic","text":"The first step is to create the core logic of the data source: In your extensibility library project, create a new MyDataSource.ts TypeScript file. Create an interface for your data source properties, typically the ones you want to persist in the Web Part property bag. Data source properties are isolated from the other general Web Part properties under the property dataSourceProperties in the property bag object. export interface ICustomDataSourceProperties { myProperty : string ; } Implement the BaseDataSource abstract class using your properties interface: export class CustomDataSource extends BaseDataSource < ICustomDataSourceProperties > { ... } Implement your data source logic according to the available methods and properties.","title":"Create the data source logic"},{"location":"extensibility/custom_data_source/#basedatasource-methods","text":"Method Description onInit() The initialization method of your data source (ex: initialize your properties, etc.). You can perform asynchronous calls here. This method will be called when the data source is instanciated by the main Web Part. getData() Probably the most important method in a data source. Returns the data of your data source, for instance, after an asynchronous call to your API. The data must follow the IDataSourceData interface. As input, you will receive all the data context with useful information to get your data (ex: the current selected page, current selected filters, etc.). getPropertyPaneGroupsConfiguration() Returns the property pane fields to display when your data source is selected. These are regular SPFx property fields and groups. Data source properties are isolated from the other general Web Part properties under the property dataSourceProperties . It means you must include that path in your property pane controls get the value persisted: . Defining fields or groups is not mandatory for a data source. If you don't want to expose any option, just return an empty array. getPagingBehavior() The paging behavior of the data source. If 'Dynamic' , the paging will be done using the pre-calculated paging.links array property returned by the data source. In this mode, this is your responsibility to populate these links (ex: using a @odata.nextLink information from your API). If 'Static' , the paging will be done statically based on the items array property returned by the data source. If 'None' , no paging will be performed. getFilterBehavior() The filter behavior of the data source. If 'Dynamic' , the available filters and values will be the ones returned by the data source in the filters array property. If 'Static' , the available filters and values will be determined using the current results set returned by the data source (using objects properties from the items array property). getAppliedFilters() If any, returns the list of filters (i.e data source fields) applied by the data source to filter results. Set this information in your data source is FilterType.Static but you still want filter initial result with 'Static' filters (like Taxonomy Picker and Date Range). These will be excluded by the main Web Part during the static filtering operation. If you forgot to set these values, data will be filtered statically using the current selected filters. getItemCount() Returns the total of items. This can be the items array length or the total of items in general. This information will be used to generate page numbers. getTemplateSlots() Returns the available template slots for this data source. More information about slots . onPropertyUpdate() The method will be called when a property pane value is updated. The main Web Part in Reactive mode for property pane fields. render() Call this method to force a render of the main Web Part.","title":"BaseDataSource - Methods"},{"location":"extensibility/custom_data_source/#basedatasource-properties","text":"Property Description properties The Web Part properties in the property bag. Corresponds to the isolated dataSourceProperties property in the global property bag. You won't be able to access any other general properties of the Web Part. context The Web Part context given by the main Web Part. serviceKeys The available service scope keys you can use to get shared service instances like the TokenService . Example:","title":"BaseDataSource - Properties"},{"location":"extensibility/custom_data_source/#using-service-scope-to-get-service-instances","text":"If your data source needs to use SPHttpClient , HttpClient , etc. services to retrieve data, you have multiple ways to get instances for these. Use the this.context property: const spHttpClient = this . context . spHttpClient ; OR Use the parent service scope to consume an existing instance: private spHttpClient : SPHttpClient ; constructor ( serviceScope : ServiceScope ) { super ( serviceScope ); serviceScope . whenFinished (() => { this . spHttpClient = serviceScope . consume ( SPHttpClient . serviceKey ); }); } We recommend to use the second approach especially if you also use shared instances like the TokenService .","title":"Using service scope to get service instances"},{"location":"extensibility/custom_data_source/#register-data-source-information","text":"The next step is to fill information about your new data source. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new IDataSourceDefinition object in the getCustomDataSources() method using these properties: Property Description name The friendly name of your data source that will show up in tiles. iconName An Office UI Fabric icon for your data source. key An unique internal key for your data source. serviceKey A service key used to instanciate your data source class. Builtin or custom data sources are instanciated dynamically using SPFx service scopes . public getCustomDataSources () : IDataSourceDefinition [] { return [ { name : 'My Custom Source' , iconName : 'Code' , key : 'CustomDataSource' , serviceKey : ServiceKey.create < IDataSource > ( 'MyCompany:CustomDataSource' , CustomDataSource ) }, ]; }","title":"Register data source information"},{"location":"extensibility/custom_layout/","text":"Create a custom layout \u00b6 Custom layouts are only supported for the 'Data Visualizer' Web Part. You can't add custom layout for the 'Data Filter' Web Part. Layout creation process \u00b6 Same as data source, the layout creation process comes in three distinct steps: Create the layout class (i.e. define the property pane options) . Create the HTML template associated to that layout . Register the layout information for discovery . Create the layout \u00b6 In your extensibility library project, create a new MyLayout.ts TypeScript file. Create an interface for your layout properties, typically the ones you want to persist in the Web Part property bag. Layout properties are isolated from the other general Web Part properties under the property layoutProperties in the property bag object. export interface ICustomLayoutProperties { myTextProperty : string ; } Implement the BaseLayout abstract class using your properties interface: export class Customlayout extends BaseLayout < ICustomLayoutProperties > { ... } Implement your layout logic according to the available methods and properties. BaseLayout - Methods \u00b6 Method Description onInit() The initialization method of your layout (ex: initialize your properties, etc.). You can perform asynchronous calls here. This method will be called when the layout is instanciated by the main Web Part. getPropertyPaneGroupsConfiguration() Returns the property pane fields to display when your layout is selected. These are regular SPFx property fields and groups. Layout properties are isolated from the other general Web Part properties under the property layoutProperties . It means you must include that path in your property pane controls get the value persisted (same thing as custom data source). Defining fields or groups is not mandatory for a layout. If you don't want to expose any option, just return an empty array. onPropertyUpdate() The method will be called when a property pane value is updated. The main Web Part in Reactive mode for property pane fields. BaseLayout - Properties \u00b6 Property Description properties The Web Part properties in the property bag. Corresponds to the isolated layoutProperties property in the global property bag. You won't be able to access any other general properties of the Web Part. Create the HTML template file \u00b6 In your extensibility library project, create a new custom-layout.html HTML file. A layout template is split into two distinct parts: A template part, containing the HTML markup to display your data once fetched . This part is mandatory to display your data. < content id = \"template\" > <!-- Your template content here --> </ content > A placeholder part, containing the HTML markup to display as placeholder while the data are getting fetched . This part is optional. < content id = \"placeholder\" > <!-- Your placeholder content here --> </ content > In a template, you must use Handlebars expressions to access and display your data. Example: iterating through all items {{ #each data.items as | item | }} <!-- Access 'item' data source fields from here (ex: item.Title)--> {{ /each }} Register layout information \u00b6 The next step is to fill information about your new layout. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new ILayoutDefinition object in the getCustomLayouts() method using these properties: Property Description name The friendly name of your layout that will show up in tiles. iconName An Office UI Fabric icon for your layout. key An unique internal key for your layout. type The layout type ( LayoutType.Results is for the 'Data Visualizer' Web Part, LayoutType.Filter for the 'Data Filter' Web Part). Only LayoutType.Results is supported for now. You can't add custom layout for the 'Data Filter' Web Part. templateContent The template HTML content as string. Use a require statement to get the string content from your HTML file. serviceKey A service key used to instanciate your layout class. Builtin or custom data layouts are instanciated dynamically using SPFx service scopes . public getCustomLayouts () : ILayoutDefinition [] { return [ { name : 'My custom layout' , iconName : 'Color' , key : 'CustomLayout' , type : LayoutType.Results , templateContent : require ( '../custom-layout.html' ), serviceKey : ServiceKey.create < ILayout > ( 'MyCompany:CustomLayout' , Customlayout ) } ]; }","title":"Custom layout"},{"location":"extensibility/custom_layout/#create-a-custom-layout","text":"Custom layouts are only supported for the 'Data Visualizer' Web Part. You can't add custom layout for the 'Data Filter' Web Part.","title":"Create a custom layout"},{"location":"extensibility/custom_layout/#layout-creation-process","text":"Same as data source, the layout creation process comes in three distinct steps: Create the layout class (i.e. define the property pane options) . Create the HTML template associated to that layout . Register the layout information for discovery .","title":"Layout creation process"},{"location":"extensibility/custom_layout/#create-the-layout","text":"In your extensibility library project, create a new MyLayout.ts TypeScript file. Create an interface for your layout properties, typically the ones you want to persist in the Web Part property bag. Layout properties are isolated from the other general Web Part properties under the property layoutProperties in the property bag object. export interface ICustomLayoutProperties { myTextProperty : string ; } Implement the BaseLayout abstract class using your properties interface: export class Customlayout extends BaseLayout < ICustomLayoutProperties > { ... } Implement your layout logic according to the available methods and properties.","title":"Create the layout"},{"location":"extensibility/custom_layout/#baselayout-methods","text":"Method Description onInit() The initialization method of your layout (ex: initialize your properties, etc.). You can perform asynchronous calls here. This method will be called when the layout is instanciated by the main Web Part. getPropertyPaneGroupsConfiguration() Returns the property pane fields to display when your layout is selected. These are regular SPFx property fields and groups. Layout properties are isolated from the other general Web Part properties under the property layoutProperties . It means you must include that path in your property pane controls get the value persisted (same thing as custom data source). Defining fields or groups is not mandatory for a layout. If you don't want to expose any option, just return an empty array. onPropertyUpdate() The method will be called when a property pane value is updated. The main Web Part in Reactive mode for property pane fields.","title":"BaseLayout - Methods"},{"location":"extensibility/custom_layout/#baselayout-properties","text":"Property Description properties The Web Part properties in the property bag. Corresponds to the isolated layoutProperties property in the global property bag. You won't be able to access any other general properties of the Web Part.","title":"BaseLayout - Properties"},{"location":"extensibility/custom_layout/#create-the-html-template-file","text":"In your extensibility library project, create a new custom-layout.html HTML file. A layout template is split into two distinct parts: A template part, containing the HTML markup to display your data once fetched . This part is mandatory to display your data. < content id = \"template\" > <!-- Your template content here --> </ content > A placeholder part, containing the HTML markup to display as placeholder while the data are getting fetched . This part is optional. < content id = \"placeholder\" > <!-- Your placeholder content here --> </ content > In a template, you must use Handlebars expressions to access and display your data. Example: iterating through all items {{ #each data.items as | item | }} <!-- Access 'item' data source fields from here (ex: item.Title)--> {{ /each }}","title":"Create the HTML template file"},{"location":"extensibility/custom_layout/#register-layout-information","text":"The next step is to fill information about your new layout. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new ILayoutDefinition object in the getCustomLayouts() method using these properties: Property Description name The friendly name of your layout that will show up in tiles. iconName An Office UI Fabric icon for your layout. key An unique internal key for your layout. type The layout type ( LayoutType.Results is for the 'Data Visualizer' Web Part, LayoutType.Filter for the 'Data Filter' Web Part). Only LayoutType.Results is supported for now. You can't add custom layout for the 'Data Filter' Web Part. templateContent The template HTML content as string. Use a require statement to get the string content from your HTML file. serviceKey A service key used to instanciate your layout class. Builtin or custom data layouts are instanciated dynamically using SPFx service scopes . public getCustomLayouts () : ILayoutDefinition [] { return [ { name : 'My custom layout' , iconName : 'Color' , key : 'CustomLayout' , type : LayoutType.Results , templateContent : require ( '../custom-layout.html' ), serviceKey : ServiceKey.create < ILayout > ( 'MyCompany:CustomLayout' , Customlayout ) } ]; }","title":"Register layout information"},{"location":"extensibility/custom_suggestions_provider/","text":"Create a custom suggestions providers \u00b6 Custom suggestions providers can be added to a search box Web Part to get normalized keywords during search. A suggestions provider supports: Zero term suggestions : suggestions displayed when the search box get the initial focus and no term is provided. Suggestions based on a keywords : suggestions matching specific keywords provided in the search box. Custom suggestions provider creation process \u00b6 Suggestions provider creation process comes in two distinct steps: Create the provider logic . Register the provider information for discovery . Create the provider logic \u00b6 In your extensibility library project, create a new MyProvider.ts TypeScript file. Create an interface for your provider properties, typically the ones you want to persist in the Web Part property bag. Providers properties are isolated from the other general Web Part properties under the property providerProperties in the property bag object. export interface ICustomSuggestionProviderProperties { myProperty : string ; } Implement the BaseSuggestionProvider abstract class using your properties interface: export class CustomSuggestionProvider extends BaseSuggestionProvider < ICustomSuggestionProviderProperties > { ... } Implement your provider logic according to the available methods and properties. BaseSuggestionProvider - Methods \u00b6 Method Description onInit() The initialization method of your provider (ex: initialize your properties, etc.). You can perform asynchronous calls here. This method will be called when the provider is instanciated by the main Web Part. This is a good place to fetch any zero term suggestions if any. getSuggestions() Method called to retrieve suggestions when a keyword is entered (in paramter). getZeroTermSuggestions() Method called to retrieve the zero term suggestions (i.e. when the search box gets initial focus). getPropertyPaneGroupsConfiguration() Returns the property pane fields to display when your provider is selected. These are regular SPFx property fields and groups. PRovider properties are isolated from the other general Web Part properties under the property providerProperties . It means you must include that path in your property pane controls get the value persisted. Defining fields or groups is not mandatory for a provider. If you don't want to expose any option, just return an empty array. onPropertyUpdate() The method will be called when a property pane value is updated. The main Web Part in Reactive mode for property pane fields. BaseSuggestionProvider - Properties \u00b6 Property Description properties The Web Part properties in the property bag. Corresponds to the isolated providerProperties property in the global property bag. You won't be able to access any other general properties of the Web Part. isZeroTermSuggestionsEnabled Flag indicating if the provider supports zero term suggestions or not. Register provider information \u00b6 The next step is to fill information about your new suggestions provider. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new ISuggestionProviderDefinition object in the getCustomSuggestionProviders() method using these properties: Property Description name The friendly name of your provider that will show up in the configuration panel. key An unique internal key for your data source. description A meaningful description of your provider. serviceKey A service key used to instanciate your provider class. Builtin or custom providers are instanciated dynamically using SPFx service scopes . public getCustomSuggestionProviders () : ISuggestionProviderDefinition [] { return [ { name : 'Custom Suggestions Provider' , key : 'CustomSuggestionsProvider' , description : 'A demo custom suggestions provider from the extensibility library' , serviceKey : ServiceKey.create < ISuggestionProvider > ( 'MyCompany:CustomSuggestionsProvider' , CustomSuggestionProvider ) } ]; }","title":"Custom suggestions provider"},{"location":"extensibility/custom_suggestions_provider/#create-a-custom-suggestions-providers","text":"Custom suggestions providers can be added to a search box Web Part to get normalized keywords during search. A suggestions provider supports: Zero term suggestions : suggestions displayed when the search box get the initial focus and no term is provided. Suggestions based on a keywords : suggestions matching specific keywords provided in the search box.","title":"Create a custom suggestions providers"},{"location":"extensibility/custom_suggestions_provider/#custom-suggestions-provider-creation-process","text":"Suggestions provider creation process comes in two distinct steps: Create the provider logic . Register the provider information for discovery .","title":"Custom suggestions provider creation process"},{"location":"extensibility/custom_suggestions_provider/#create-the-provider-logic","text":"In your extensibility library project, create a new MyProvider.ts TypeScript file. Create an interface for your provider properties, typically the ones you want to persist in the Web Part property bag. Providers properties are isolated from the other general Web Part properties under the property providerProperties in the property bag object. export interface ICustomSuggestionProviderProperties { myProperty : string ; } Implement the BaseSuggestionProvider abstract class using your properties interface: export class CustomSuggestionProvider extends BaseSuggestionProvider < ICustomSuggestionProviderProperties > { ... } Implement your provider logic according to the available methods and properties.","title":"Create the provider logic"},{"location":"extensibility/custom_suggestions_provider/#basesuggestionprovider-methods","text":"Method Description onInit() The initialization method of your provider (ex: initialize your properties, etc.). You can perform asynchronous calls here. This method will be called when the provider is instanciated by the main Web Part. This is a good place to fetch any zero term suggestions if any. getSuggestions() Method called to retrieve suggestions when a keyword is entered (in paramter). getZeroTermSuggestions() Method called to retrieve the zero term suggestions (i.e. when the search box gets initial focus). getPropertyPaneGroupsConfiguration() Returns the property pane fields to display when your provider is selected. These are regular SPFx property fields and groups. PRovider properties are isolated from the other general Web Part properties under the property providerProperties . It means you must include that path in your property pane controls get the value persisted. Defining fields or groups is not mandatory for a provider. If you don't want to expose any option, just return an empty array. onPropertyUpdate() The method will be called when a property pane value is updated. The main Web Part in Reactive mode for property pane fields.","title":"BaseSuggestionProvider - Methods"},{"location":"extensibility/custom_suggestions_provider/#basesuggestionprovider-properties","text":"Property Description properties The Web Part properties in the property bag. Corresponds to the isolated providerProperties property in the global property bag. You won't be able to access any other general properties of the Web Part. isZeroTermSuggestionsEnabled Flag indicating if the provider supports zero term suggestions or not.","title":"BaseSuggestionProvider - Properties"},{"location":"extensibility/custom_suggestions_provider/#register-provider-information","text":"The next step is to fill information about your new suggestions provider. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new ISuggestionProviderDefinition object in the getCustomSuggestionProviders() method using these properties: Property Description name The friendly name of your provider that will show up in the configuration panel. key An unique internal key for your data source. description A meaningful description of your provider. serviceKey A service key used to instanciate your provider class. Builtin or custom providers are instanciated dynamically using SPFx service scopes . public getCustomSuggestionProviders () : ISuggestionProviderDefinition [] { return [ { name : 'Custom Suggestions Provider' , key : 'CustomSuggestionsProvider' , description : 'A demo custom suggestions provider from the extensibility library' , serviceKey : ServiceKey.create < ISuggestionProvider > ( 'MyCompany:CustomSuggestionsProvider' , CustomSuggestionProvider ) } ]; }","title":"Register provider information"},{"location":"extensibility/custom_web_component/","text":"Create a custom web component \u00b6 What is a web component? \u00b6 A web component is a custom HTML element that can be used in your templates to implement complex behaviors. In the solution we used them here as \"wrappers\" for React components to be able to use them with Handlebars. More information about web components in general can be found here . By default, several components are available ( see the complete list ). If these does not fit your requirement, you can still create your own. Web component creation process \u00b6 Web component creation process comes in two distinct steps: Create the component class and its React sub components . Register the component information for discovery . Create the component logic and sub components \u00b6 A web component is typically composed of these parts: A web component class derived from the native HTMLElement class. A main React component to be rendered inside the web component. To create new component: In your extensibility library project, create a new MyComponent.ts JSX file. Create a new class extending the abstract class BaseWebComponent . This class must have at least the connectedCallback() method from base interface HTMLElement . export class MyCustomComponentWebComponent extends BaseWebComponent { public constructor () { super (); } public async connectedCallback() { ... } } Create a new regular React component (in the same file or a separate file and as class or hook): export interface IObjectParam { myProperty : string ; } export interface ICustomComponentProps { /** * A sample string param */ myStringParam? : IObjectParam ; /*** * A sample object param */ myObjectParam? : string ; } export interface ICustomComponenState { } export class CustomComponent extends React . Component < ICustomComponentProps , ICustomComponenState > { public render() { // Parse custom object const myObject : IObjectParam = this . props . myObjectParam ; return < div > { this . props . myStringParam } { myObject . myProperty } < /div>; } } In this solution, web components are considered stateless , meaning they will be entirely recreated when an attribute is changed (coming from the property pane). It means you can still use an internal state in your React components but not rely on the parent context (props) since it will be recreated every time by the Handlebars template if a property pane value is updated. The componentDidMount() method will be called every time in this case (not componentDidUpdate() ). In your web component class, render your React component: public async connectedCallback() { let props = this . resolveAttributes (); const customComponent = < CustomComponent {... props } /> ; ReactDOM . render ( customComponent , this ); } The resolveAttributes() method will look at all data-* HTML attributes in your web component custom element node and return a corresponding key/value pair object with values in their guessed type that you can pass directly to your React component as props. By convention, web component attributes have to be passed using camel case to be tranformed into React component props. For instance: a data-my-string-param HTML attribute becomes myStringParam prop. Supported guessed types for attributes are boolean , string , date and object . All non supported types will be passed a string . HTML attributes must use the data- prefix to be retrieved correctly. To pass JSON objects, you can use the JSONstringify Handlebars helper. If valid JSON, they will be returned as objects by the resolveAttributes() method. Example < my-custom-component data-my-string-param = \"Default value\" data-my-object-param = \"{{JSONstringify this 2}}\" data-my-date-param = \"01/01/2020\" data-my-boolean-param = \"true\" > </ my-custom-component > Register component information \u00b6 The next step is to fill information about your new component. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new IComponentDefinition object in the getCustomWebComponents() method using these properties: Property Description componentName The name for your component. This name will be used as the custom HTML element name (ex: <my-custom-component> ). componentClass The web component class for that component. public getCustomWebComponents () : IComponentDefinition < any > [] { return [ { componentName : 'my-custom-component' , componentClass : MyCustomComponentWebComponent } ]; }","title":"Custom web component"},{"location":"extensibility/custom_web_component/#create-a-custom-web-component","text":"","title":"Create a custom web component"},{"location":"extensibility/custom_web_component/#what-is-a-web-component","text":"A web component is a custom HTML element that can be used in your templates to implement complex behaviors. In the solution we used them here as \"wrappers\" for React components to be able to use them with Handlebars. More information about web components in general can be found here . By default, several components are available ( see the complete list ). If these does not fit your requirement, you can still create your own.","title":"What is a web component?"},{"location":"extensibility/custom_web_component/#web-component-creation-process","text":"Web component creation process comes in two distinct steps: Create the component class and its React sub components . Register the component information for discovery .","title":"Web component creation process"},{"location":"extensibility/custom_web_component/#create-the-component-logic-and-sub-components","text":"A web component is typically composed of these parts: A web component class derived from the native HTMLElement class. A main React component to be rendered inside the web component. To create new component: In your extensibility library project, create a new MyComponent.ts JSX file. Create a new class extending the abstract class BaseWebComponent . This class must have at least the connectedCallback() method from base interface HTMLElement . export class MyCustomComponentWebComponent extends BaseWebComponent { public constructor () { super (); } public async connectedCallback() { ... } } Create a new regular React component (in the same file or a separate file and as class or hook): export interface IObjectParam { myProperty : string ; } export interface ICustomComponentProps { /** * A sample string param */ myStringParam? : IObjectParam ; /*** * A sample object param */ myObjectParam? : string ; } export interface ICustomComponenState { } export class CustomComponent extends React . Component < ICustomComponentProps , ICustomComponenState > { public render() { // Parse custom object const myObject : IObjectParam = this . props . myObjectParam ; return < div > { this . props . myStringParam } { myObject . myProperty } < /div>; } } In this solution, web components are considered stateless , meaning they will be entirely recreated when an attribute is changed (coming from the property pane). It means you can still use an internal state in your React components but not rely on the parent context (props) since it will be recreated every time by the Handlebars template if a property pane value is updated. The componentDidMount() method will be called every time in this case (not componentDidUpdate() ). In your web component class, render your React component: public async connectedCallback() { let props = this . resolveAttributes (); const customComponent = < CustomComponent {... props } /> ; ReactDOM . render ( customComponent , this ); } The resolveAttributes() method will look at all data-* HTML attributes in your web component custom element node and return a corresponding key/value pair object with values in their guessed type that you can pass directly to your React component as props. By convention, web component attributes have to be passed using camel case to be tranformed into React component props. For instance: a data-my-string-param HTML attribute becomes myStringParam prop. Supported guessed types for attributes are boolean , string , date and object . All non supported types will be passed a string . HTML attributes must use the data- prefix to be retrieved correctly. To pass JSON objects, you can use the JSONstringify Handlebars helper. If valid JSON, they will be returned as objects by the resolveAttributes() method. Example < my-custom-component data-my-string-param = \"Default value\" data-my-object-param = \"{{JSONstringify this 2}}\" data-my-date-param = \"01/01/2020\" data-my-boolean-param = \"true\" > </ my-custom-component >","title":"Create the component logic and sub components"},{"location":"extensibility/custom_web_component/#register-component-information","text":"The next step is to fill information about your new component. In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface) return a new IComponentDefinition object in the getCustomWebComponents() method using these properties: Property Description componentName The name for your component. This name will be used as the custom HTML element name (ex: <my-custom-component> ). componentClass The web component class for that component. public getCustomWebComponents () : IComponentDefinition < any > [] { return [ { componentName : 'my-custom-component' , componentClass : MyCustomComponentWebComponent } ]; }","title":"Register component information"},{"location":"extensibility/handlebars_customizations/","text":"Register Handlebars customizations \u00b6 By default, builtin helpers and open-source Handlebars helpers are available. If these don't fit your requirements, you can still create your own custom helper or partial that you can use in your HTML templates or layout fields (ex: 'Cards' or 'Details List' layouts). To avoid any conflict, each Web Part instance gets its own Handlebars isolated namespace (i.e. using Handlebars.create() ) meaning registering customizations in the global Handlebars namespace won't work (ex: using Handlebars.registerHelper() directly). To register a new Handlebars customization for the targeted Web Part (i.e. the Web Part instances where the extensibility library is registered and enabled): In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface), register your customization using the registerHandlebarsCustomizations() method. The namespace parameter corresponds to the targeted Web Part Handlebars isolated namespace: From here, use the Handlebars API to add your customizations to this specific namespace. They will be availabe in templates for registered Web Part instances: public registerHandlebarsCustomizations ( namespace : typeof Handlebars ) { // Register custom Handlebars helpers // Usage {{myHelper 'value'}} namespace . registerHelper ( 'myHelper' , ( value : string ) => { return new namespace . SafeString ( value . toUpperCase ()); }); }","title":"Custom Handlebars customizations"},{"location":"extensibility/handlebars_customizations/#register-handlebars-customizations","text":"By default, builtin helpers and open-source Handlebars helpers are available. If these don't fit your requirements, you can still create your own custom helper or partial that you can use in your HTML templates or layout fields (ex: 'Cards' or 'Details List' layouts). To avoid any conflict, each Web Part instance gets its own Handlebars isolated namespace (i.e. using Handlebars.create() ) meaning registering customizations in the global Handlebars namespace won't work (ex: using Handlebars.registerHelper() directly). To register a new Handlebars customization for the targeted Web Part (i.e. the Web Part instances where the extensibility library is registered and enabled): In the library main entry point (i.e. the class implementing the IExtensibilityLibrary in interface), register your customization using the registerHandlebarsCustomizations() method. The namespace parameter corresponds to the targeted Web Part Handlebars isolated namespace: From here, use the Handlebars API to add your customizations to this specific namespace. They will be availabe in templates for registered Web Part instances: public registerHandlebarsCustomizations ( namespace : typeof Handlebars ) { // Register custom Handlebars helpers // Usage {{myHelper 'value'}} namespace . registerHelper ( 'myHelper' , ( value : string ) => { return new namespace . SafeString ( value . toUpperCase ()); }); }","title":"Register Handlebars customizations"},{"location":"extensibility/templating/","text":"Customize layout templates with HTML, CSS and Handlebars \u00b6 In a basic customization scenario, super users and webmasters can customize existing templates or start from a blank template to adapt the UI to their requirements. Templates use Handlebars to display data retrieved from the data source. There are several options to customize a template: Use regular HTML markup, Handlebars syntax and helpers . Use default web components provided by the solution . Write custom CSS styles . Use Microsoft Graph Toolkit components . The templates and fields HTML markup is sanitized automatically preventing XSS attacks. We used DOMPurify to do so. It means for instance, you cannot add your own <script> tags or inline JavaScript. Template structure \u00b6 A layout template is always split into two distinct parts: < content id = \"template\" > <!-- Your template content here --> </ content > < content id = \"placeholder\" > <!-- Your placeholder content here --> </ content > A template part, containing the HTML markup to display your data once fetched . This part is mandatory to display your data. A placeholder part, containing the HTML markup to display as placeholder while the data are getting fetched . This part is optional. Both can use Handlebars and web components (Microsoft Graph Toolkit included). Handlebars helpers \u00b6 The following custom helpers are available in addition to the handlebars-helpers . If those don't do the job for you, you can still write your own using the extensibility library . Helper Description Example {{getGraphPreviewUrl \"<absolute_URL>\" Try to determine the preview URL based on an absolute URL using the unified Microsoft Graph URL syntax. For instance, https://aequosdev.sharepoint.com/sites/dev/Shared%20Documents/MyDocument.pdf becomes https://aequosdev.sharepoint.com/sites/dev/Shared%20Documents/?id=/sites/dev/Shared%20Documents/MyDocument.pdf&parent=/sites/dev/Shared%20Documents {{getGraphPreviewUrl 'https://aequosdev.sharepoint.com/sites/dev/Shared%20Documents/MyDocument.pdf'}} {{getCountMessage <total items count> <?keywords>}} Display a friendly message displaying the result and the entered keywords. {{getCountMessage 5 'contoso'}} will display '5 results for 'contoso' . {{getSummary \"<value>\"}} Use with SharePoint Search data source and the HitHighlightedSummary SharePoint search managed property . Returns the formatted value for rendering. {{getSummary HitHighlightedSummary}} {{getDate <data_value> \"<format>\" <time handling>}} Format the date with Moment.js according to the current language. Date in the managed property should be on the form 2018-09-10T06:29:25.0000000Z for the function to work. <time handling> is optional and takes 0 = format to browsers time zone (default) 1 = ignore Z time and handle as browsers local time zone 2 = strip time and set to 00:00:00 in browsers local time zone 3 = display in the time zone for the current web 4 = display in the time zone from the uers profile {{getDate 2018-09-10T06:29:25.0000000Z 'LL'}} {{getUrlField <managed_propertyOWSURLH> \"URL|Title\"}} Use with SharePoint Search data source . Returns the URL or Title part of a URL autocreated managed property {{getUrlField MyPropertyOWSURLH \"Title\"}} {{getUniqueCount items \"<property>\"}} or {{getUniqueCount array}} Get the unique count of a property over the result set (or another array) or get the unique count of objects in an array. Example: [1,1,1,2,2,4] would return 3 . {{getUniqueCount [1,1,1,2,2,4]}} {{getUnique items \"<property>\"}} Return the unique values as a new array based on an array or property of an object in the array. {{getUnique items \"NewsCategory\"}} {{#group items by=\"<property>\"}} Group items by a specific results property. See https://github.com/shannonmoeller/handlebars-group-by for usage. {{slot item <property_name>}} Return the <property_name> value for the item object. Supports deep property paths. {{slot item \"property.subproperty\"}} {{getUserEmail <value>}} Extract the user email in a string based on a email regex (ex: a claim). Returns the first match. {{getUserEmail \"franck.cornu@aequosdev.onmicrosoft.com | Franck Cornu | 693A30232E667C6D656D626572736869707C6672616E636B2E636F726E7540616571756F736465762E6F6E6D6963726F736F66742E636F6D i:0#.f|membership|franck.cornu@aequosdev.onmicrosoft.com\"}} Need any other helper? Let us know here ! Using builtin web components \u00b6 By default, several components are available ( see the complete list ). If these does not fit your requirement, you can still create your own using the extensibility library . Custom CSS styles \u00b6 Inside an HTML template (or layout field), you can write your own CSS styles using a <style> tag. Even better, you can inject Handlebars variables, helpers, conditional blocks, etc. right inside it and get dynamic classes or attributes < content id = \"data-content\" > < style > . example-themePrimary a { color : {{ @ root . theme . palette . themePrimary } } ; } ... </ style > < div class = \"template\" > ... ... However, all CSS rules (including @media rules) will be all prefixed automatically by an unique ID ( aequos-template_<Web Part instance ID> ) to make sure styles are isolated from other Web Parts on the page. We do this to avoid conflicts between classes in the global context. Use SharePoint theme in your templates \u00b6 If you need to use current site theme colors, fonts and so on you can use the theme property available in the @root Handlebars context like this: < content id = \"data-content\" > < style > .example-themePrimary { color: {{@root.theme.palette.themePrimary}}; } ... </ styles > ... < span class = \"example-themePrimary\" > {{Title}} </ span > ... </ content > You can also use this variable in the 'Details List' and 'Cards' layouts in field expresions. A good way to see all available values for the current theme is to switch to the debug layout and inspect these values: Work with placeholders \u00b6 To indicate the data are loading, you can create placeholders (shimmers) using the <content id=\"placeholder-content\"> section of your HTML template: The placeholder is only loaded during first data load. For subsequent requests, a overlay will be displayed. <content id=\"placeholder-content\"> <style> .placeholder .icon { width: 20px; height: 16px; margin-right: 5px; } .placeholder ul { list-style: none; } .placeholder ul li { display: flex; align-items: center; padding: 8px; } </style> <div class=\"placeholder\"> <ul> {{#times 5}} <li> <div class=\"icon placeholder--shimmer\"></div> <span class=\"placeholder--shimmer placeholder--line\" style=\"width: 60%\"></span> </li> {{/times}} </ul> </div> </content> Use CSS classes placeholder--shimmer and placeholder--line to build your placeholders. Basically, you can reuse the same HTML structure as your template content markup, but using these these classes instead to fill areas. If no placeholder is present in the template, a default one will be loaded. Microsoft Graph Toolkit \u00b6 The Microsoft Graph Toolkit is a collection of reusable, framework-agnostic web components and helpers for accessing and working with Microsoft Graph. The components are fully functional right of out of the box, with built in providers that authenticate with and fetch data from Microsoft Graph. In the solution, you can use Graph Tookit components whitout the need to re-authenticate against Microsoft Graph because the Web Parts already use the SharePoint provider . Refer to the official documentation to see all available components . For instance, we use the Microsoft Graph Toolkit for the people layout via <mgt-person> .","title":"Templating"},{"location":"extensibility/templating/#customize-layout-templates-with-html-css-and-handlebars","text":"In a basic customization scenario, super users and webmasters can customize existing templates or start from a blank template to adapt the UI to their requirements. Templates use Handlebars to display data retrieved from the data source. There are several options to customize a template: Use regular HTML markup, Handlebars syntax and helpers . Use default web components provided by the solution . Write custom CSS styles . Use Microsoft Graph Toolkit components . The templates and fields HTML markup is sanitized automatically preventing XSS attacks. We used DOMPurify to do so. It means for instance, you cannot add your own <script> tags or inline JavaScript.","title":"Customize layout templates with HTML, CSS and Handlebars"},{"location":"extensibility/templating/#template-structure","text":"A layout template is always split into two distinct parts: < content id = \"template\" > <!-- Your template content here --> </ content > < content id = \"placeholder\" > <!-- Your placeholder content here --> </ content > A template part, containing the HTML markup to display your data once fetched . This part is mandatory to display your data. A placeholder part, containing the HTML markup to display as placeholder while the data are getting fetched . This part is optional. Both can use Handlebars and web components (Microsoft Graph Toolkit included).","title":"Template structure"},{"location":"extensibility/templating/#handlebars-helpers","text":"The following custom helpers are available in addition to the handlebars-helpers . If those don't do the job for you, you can still write your own using the extensibility library . Helper Description Example {{getGraphPreviewUrl \"<absolute_URL>\" Try to determine the preview URL based on an absolute URL using the unified Microsoft Graph URL syntax. For instance, https://aequosdev.sharepoint.com/sites/dev/Shared%20Documents/MyDocument.pdf becomes https://aequosdev.sharepoint.com/sites/dev/Shared%20Documents/?id=/sites/dev/Shared%20Documents/MyDocument.pdf&parent=/sites/dev/Shared%20Documents {{getGraphPreviewUrl 'https://aequosdev.sharepoint.com/sites/dev/Shared%20Documents/MyDocument.pdf'}} {{getCountMessage <total items count> <?keywords>}} Display a friendly message displaying the result and the entered keywords. {{getCountMessage 5 'contoso'}} will display '5 results for 'contoso' . {{getSummary \"<value>\"}} Use with SharePoint Search data source and the HitHighlightedSummary SharePoint search managed property . Returns the formatted value for rendering. {{getSummary HitHighlightedSummary}} {{getDate <data_value> \"<format>\" <time handling>}} Format the date with Moment.js according to the current language. Date in the managed property should be on the form 2018-09-10T06:29:25.0000000Z for the function to work. <time handling> is optional and takes 0 = format to browsers time zone (default) 1 = ignore Z time and handle as browsers local time zone 2 = strip time and set to 00:00:00 in browsers local time zone 3 = display in the time zone for the current web 4 = display in the time zone from the uers profile {{getDate 2018-09-10T06:29:25.0000000Z 'LL'}} {{getUrlField <managed_propertyOWSURLH> \"URL|Title\"}} Use with SharePoint Search data source . Returns the URL or Title part of a URL autocreated managed property {{getUrlField MyPropertyOWSURLH \"Title\"}} {{getUniqueCount items \"<property>\"}} or {{getUniqueCount array}} Get the unique count of a property over the result set (or another array) or get the unique count of objects in an array. Example: [1,1,1,2,2,4] would return 3 . {{getUniqueCount [1,1,1,2,2,4]}} {{getUnique items \"<property>\"}} Return the unique values as a new array based on an array or property of an object in the array. {{getUnique items \"NewsCategory\"}} {{#group items by=\"<property>\"}} Group items by a specific results property. See https://github.com/shannonmoeller/handlebars-group-by for usage. {{slot item <property_name>}} Return the <property_name> value for the item object. Supports deep property paths. {{slot item \"property.subproperty\"}} {{getUserEmail <value>}} Extract the user email in a string based on a email regex (ex: a claim). Returns the first match. {{getUserEmail \"franck.cornu@aequosdev.onmicrosoft.com | Franck Cornu | 693A30232E667C6D656D626572736869707C6672616E636B2E636F726E7540616571756F736465762E6F6E6D6963726F736F66742E636F6D i:0#.f|membership|franck.cornu@aequosdev.onmicrosoft.com\"}} Need any other helper? Let us know here !","title":"Handlebars helpers"},{"location":"extensibility/templating/#using-builtin-web-components","text":"By default, several components are available ( see the complete list ). If these does not fit your requirement, you can still create your own using the extensibility library .","title":"Using builtin web components"},{"location":"extensibility/templating/#custom-css-styles","text":"Inside an HTML template (or layout field), you can write your own CSS styles using a <style> tag. Even better, you can inject Handlebars variables, helpers, conditional blocks, etc. right inside it and get dynamic classes or attributes < content id = \"data-content\" > < style > . example-themePrimary a { color : {{ @ root . theme . palette . themePrimary } } ; } ... </ style > < div class = \"template\" > ... ... However, all CSS rules (including @media rules) will be all prefixed automatically by an unique ID ( aequos-template_<Web Part instance ID> ) to make sure styles are isolated from other Web Parts on the page. We do this to avoid conflicts between classes in the global context.","title":"Custom CSS styles"},{"location":"extensibility/templating/#use-sharepoint-theme-in-your-templates","text":"If you need to use current site theme colors, fonts and so on you can use the theme property available in the @root Handlebars context like this: < content id = \"data-content\" > < style > .example-themePrimary { color: {{@root.theme.palette.themePrimary}}; } ... </ styles > ... < span class = \"example-themePrimary\" > {{Title}} </ span > ... </ content > You can also use this variable in the 'Details List' and 'Cards' layouts in field expresions. A good way to see all available values for the current theme is to switch to the debug layout and inspect these values:","title":"Use SharePoint theme in your templates"},{"location":"extensibility/templating/#work-with-placeholders","text":"To indicate the data are loading, you can create placeholders (shimmers) using the <content id=\"placeholder-content\"> section of your HTML template: The placeholder is only loaded during first data load. For subsequent requests, a overlay will be displayed. <content id=\"placeholder-content\"> <style> .placeholder .icon { width: 20px; height: 16px; margin-right: 5px; } .placeholder ul { list-style: none; } .placeholder ul li { display: flex; align-items: center; padding: 8px; } </style> <div class=\"placeholder\"> <ul> {{#times 5}} <li> <div class=\"icon placeholder--shimmer\"></div> <span class=\"placeholder--shimmer placeholder--line\" style=\"width: 60%\"></span> </li> {{/times}} </ul> </div> </content> Use CSS classes placeholder--shimmer and placeholder--line to build your placeholders. Basically, you can reuse the same HTML structure as your template content markup, but using these these classes instead to fill areas. If no placeholder is present in the template, a default one will be loaded.","title":"Work with placeholders"},{"location":"extensibility/templating/#microsoft-graph-toolkit","text":"The Microsoft Graph Toolkit is a collection of reusable, framework-agnostic web components and helpers for accessing and working with Microsoft Graph. The components are fully functional right of out of the box, with built in providers that authenticate with and fetch data from Microsoft Graph. In the solution, you can use Graph Tookit components whitout the need to re-authenticate against Microsoft Graph because the Web Parts already use the SharePoint provider . Refer to the official documentation to see all available components . For instance, we use the Microsoft Graph Toolkit for the people layout via <mgt-person> .","title":"Microsoft Graph Toolkit"},{"location":"extensibility/web_components_list/","text":"Builtin web components \u00b6 Here are the list of all reusable web components you can use to customize your templates. <aequos-iconfile> <aequos-documentcard> <aequos-filepreview> <aequos-icon> <aequos-panel> <aequos-collapsible> <aequos-persona> All other web components you will see in builtin layout templates are considered internal and are not supported for custom use. All components have an optional data-theme-variant attribute used to set the theme for your internal React components (for instance using Office UI Fabric). This value is typically retrieved from the root Handlebars context and reflect the current section theme where the Web Part belongs. If not set, the theme of current site will be used as fallback and may not corespond to the current section theme . <aequos-iconfile> \u00b6 Description : Render a file icon according to an extension. - Usage < aequos-iconfile data-extension = \"docx\" data-is-container = \"false\" data-size = \"32\" > </ aequos-iconfile > Parameter Description data-extension The file extension to render. data-is-container If true or 1 , the icon will be a folder. data-size The size of the icon to display. <aequos-documentcard> \u00b6 Description : Render a document card. Usage < aequos-documentcard data-location = \"&lt;a href=\\&quot;https://...\\&quot;&gt;Title&lt;/a&gt;\" data-title = \"Title\" data-preview-image = \"https://...\" data-preview-url = \"https://...\" data-date = \"01/01/2020\" data-href = \"https://...\" data-author = \"David Lopez\" data-profile-image = \"/_layouts/15/userphoto.aspx?size=L&username=david.lopez@contoso.com\" data-file-extension = \"docx\" data-enable-preview = \"true\" data-is-container = \"false\" data-show-file-icon = \"true\" > ` </ aequos-documentcard > Parameter Description data-location The document card location. HTML is allowed here. You must encode the string for this scenario. data-title The document card title. data-preview-image The preview image URL for the card. data-preview-url The preview URL for the card. data-href The URL for the card title. data-author The author to display. data-profile-image The profile image URL for the author if any. data-file-extension The document card file extension if any. data-enable-preview If the card supports preview. If true , a preview URL + preview image URL should be set. data-is-container If true or 1 , the file icon will be a folder icon. show-file-icon If true or 1 , the file icon will be hidden/displayed. <aequos-filepreview> \u00b6 Description : Render file preview in a callout when the wrapped element is clicked . The wrapped element can be anything (text, image, etc.) Usage < aequos-filepreview data-preview-url = \"https://...\" data-preview-image-url = \"https://...\" > < span > Wrapped element </ span > </ aequos-filepreview > Parameter Description data-preview-image The preview image URL for the callout displayed while the preview is loading in a iframe (optional). data-preview-url The preview URL for the element in the callout. <aequos-icon> \u00b6 Description : Display an Office UI Fabric icon . Usage < aequos-icon data-name = \"Tag\" aria-hidden = \"true\" ></ aequos-icon > Parameter Description data-name The Office UI Fabric icon name to display (case sensitive). <aequos-panel> \u00b6 Description : display a panel with ( panel-content ) content when the associated outer panel-open element is clicked. Usage < aequos-panel data-is-open = \"false\" data-is-light-dismiss = \"true\" data-is-blocking = \"true\" data-size = \"2\" data-panel-header-text = \"Panel header!\" > < template id = \"panel-open\" > <!-- All the content here will be wrapped with an onclick event opening/hiding the panel --> Click me! </ template > < template id = \"panel-content\" > <!-- Panel content goes here --> Panel content! </ template > </ aequos-panel > <aequos-collapsible> \u00b6 Description : expand/collapse the collapsible-content contetn when the text with data-group-name is clicked. Usage < aequos-collapsible data-group-name = \"Collapsible content\" data-is-default-collapsed = \"true\" > < template id = \"collapsible-content\" > < div > My Content! </ div > </ template > < template id = \"collapsible-footer\" > < div > My Footer! </ div > </ template > </ aequos-collapsible > Parameter Description data-is-default-collapsed If the content should be collapsed by default true/false . data-group-name The header group name for expand/collapse. <aequos-persona> \u00b6 Description : display a persona item with relevant information. Usage < aequos-persona data-image-url = \"/_layouts/15/userphoto.aspx?size=L&username=david.lopez@contoso.com\" data-primary-text = \"David Lopez\" data-secondary-text = \"Unknown\" data-tertiary-text = \"\" data-optional-text = \"514 928 0000\" data-persona-size = \"\" > </ aequos-persona > Parameter Description data-image-url The persona image URL. data-primary-text The primary text (ex: person display name). data-secondary-text The secondary text to display (ex: job title). data-tertiary-text The tertiary text to display (ex: work phone). data-optional-text The optional text to display. data-persona-size The size of the persona item to display (no only the picture). Valid values are tiny = 0 extraExtraSmall = 1 extraSmall = 2 small = 3 regular = 4 large = 5 extraLarge = 6","title":"Builtin web components"},{"location":"extensibility/web_components_list/#builtin-web-components","text":"Here are the list of all reusable web components you can use to customize your templates. <aequos-iconfile> <aequos-documentcard> <aequos-filepreview> <aequos-icon> <aequos-panel> <aequos-collapsible> <aequos-persona> All other web components you will see in builtin layout templates are considered internal and are not supported for custom use. All components have an optional data-theme-variant attribute used to set the theme for your internal React components (for instance using Office UI Fabric). This value is typically retrieved from the root Handlebars context and reflect the current section theme where the Web Part belongs. If not set, the theme of current site will be used as fallback and may not corespond to the current section theme .","title":"Builtin web components"},{"location":"extensibility/web_components_list/#ltaequos-iconfilegt","text":"Description : Render a file icon according to an extension. - Usage < aequos-iconfile data-extension = \"docx\" data-is-container = \"false\" data-size = \"32\" > </ aequos-iconfile > Parameter Description data-extension The file extension to render. data-is-container If true or 1 , the icon will be a folder. data-size The size of the icon to display.","title":"&amp;lt;aequos-iconfile&amp;gt;"},{"location":"extensibility/web_components_list/#ltaequos-documentcardgt","text":"Description : Render a document card. Usage < aequos-documentcard data-location = \"&lt;a href=\\&quot;https://...\\&quot;&gt;Title&lt;/a&gt;\" data-title = \"Title\" data-preview-image = \"https://...\" data-preview-url = \"https://...\" data-date = \"01/01/2020\" data-href = \"https://...\" data-author = \"David Lopez\" data-profile-image = \"/_layouts/15/userphoto.aspx?size=L&username=david.lopez@contoso.com\" data-file-extension = \"docx\" data-enable-preview = \"true\" data-is-container = \"false\" data-show-file-icon = \"true\" > ` </ aequos-documentcard > Parameter Description data-location The document card location. HTML is allowed here. You must encode the string for this scenario. data-title The document card title. data-preview-image The preview image URL for the card. data-preview-url The preview URL for the card. data-href The URL for the card title. data-author The author to display. data-profile-image The profile image URL for the author if any. data-file-extension The document card file extension if any. data-enable-preview If the card supports preview. If true , a preview URL + preview image URL should be set. data-is-container If true or 1 , the file icon will be a folder icon. show-file-icon If true or 1 , the file icon will be hidden/displayed.","title":"&amp;lt;aequos-documentcard&amp;gt;"},{"location":"extensibility/web_components_list/#ltaequos-filepreviewgt","text":"Description : Render file preview in a callout when the wrapped element is clicked . The wrapped element can be anything (text, image, etc.) Usage < aequos-filepreview data-preview-url = \"https://...\" data-preview-image-url = \"https://...\" > < span > Wrapped element </ span > </ aequos-filepreview > Parameter Description data-preview-image The preview image URL for the callout displayed while the preview is loading in a iframe (optional). data-preview-url The preview URL for the element in the callout.","title":"&amp;lt;aequos-filepreview&amp;gt;"},{"location":"extensibility/web_components_list/#ltaequos-icongt","text":"Description : Display an Office UI Fabric icon . Usage < aequos-icon data-name = \"Tag\" aria-hidden = \"true\" ></ aequos-icon > Parameter Description data-name The Office UI Fabric icon name to display (case sensitive).","title":"&amp;lt;aequos-icon&amp;gt;"},{"location":"extensibility/web_components_list/#ltaequos-panelgt","text":"Description : display a panel with ( panel-content ) content when the associated outer panel-open element is clicked. Usage < aequos-panel data-is-open = \"false\" data-is-light-dismiss = \"true\" data-is-blocking = \"true\" data-size = \"2\" data-panel-header-text = \"Panel header!\" > < template id = \"panel-open\" > <!-- All the content here will be wrapped with an onclick event opening/hiding the panel --> Click me! </ template > < template id = \"panel-content\" > <!-- Panel content goes here --> Panel content! </ template > </ aequos-panel >","title":"&amp;lt;aequos-panel&amp;gt;"},{"location":"extensibility/web_components_list/#ltaequos-collapsiblegt","text":"Description : expand/collapse the collapsible-content contetn when the text with data-group-name is clicked. Usage < aequos-collapsible data-group-name = \"Collapsible content\" data-is-default-collapsed = \"true\" > < template id = \"collapsible-content\" > < div > My Content! </ div > </ template > < template id = \"collapsible-footer\" > < div > My Footer! </ div > </ template > </ aequos-collapsible > Parameter Description data-is-default-collapsed If the content should be collapsed by default true/false . data-group-name The header group name for expand/collapse.","title":"&amp;lt;aequos-collapsible&amp;gt;"},{"location":"extensibility/web_components_list/#ltaequos-personagt","text":"Description : display a persona item with relevant information. Usage < aequos-persona data-image-url = \"/_layouts/15/userphoto.aspx?size=L&username=david.lopez@contoso.com\" data-primary-text = \"David Lopez\" data-secondary-text = \"Unknown\" data-tertiary-text = \"\" data-optional-text = \"514 928 0000\" data-persona-size = \"\" > </ aequos-persona > Parameter Description data-image-url The persona image URL. data-primary-text The primary text (ex: person display name). data-secondary-text The secondary text to display (ex: job title). data-tertiary-text The tertiary text to display (ex: work phone). data-optional-text The optional text to display. data-persona-size The size of the persona item to display (no only the picture). Valid values are tiny = 0 extraExtraSmall = 1 extraSmall = 2 small = 3 regular = 4 large = 5 extraLarge = 6","title":"&amp;lt;aequos-persona&amp;gt;"},{"location":"getting_started/connections_chart/","text":"Connection diagram between Web Parts \u00b6 The included Web Parts can be connected together to create a complete search center according to this schema: The connection between a Data Visualizer and Data Filters is a two-ways connection. All other connection are one-way .","title":"Connections overview"},{"location":"getting_started/connections_chart/#connection-diagram-between-web-parts","text":"The included Web Parts can be connected together to create a complete search center according to this schema: The connection between a Data Visualizer and Data Filters is a two-ways connection. All other connection are one-way .","title":"Connection diagram between Web Parts"},{"location":"getting_started/sample_scenarios/","text":"Sample scenarios \u00b6 Wondering what you can do with this solution? Here are some demo videos of common usage scenarios for the Data Visualizer solution. Build a complete search center \u00b6 In this demo video, we show you how to create a complete search center in a SharePoint page using the full solution Web Parts set (Search Box, Data Filters, Data Visualizer and Data Verticals). This is a typical scenario when you want to bypass the OOTB SharePoint search page limitations and integrate with your own information architecture. Build a people directory using the Microsoft Graph data source \u00b6 A classic use case in a SharePoint portal. This time, instead using the SharePoint search, we use the Microsoft Graph and the People API to lookup relevant people based on search box Web Part input keywords. Use static taxonomy filters with the SharePoint search data source \u00b6 Static filters don't necessarily need to be connected to a Data Visualizer Web Part. They are different from 'Refinement' filters and they just send abitrary filter values to consumer Web Parts ignoring received values from the data source. In this demo, we show you a practical use case and how to use them, for instance retrieve data from the SharePoint search according to a specific taxonomy term in a specific terms set without any prior results fetched (meaning filter values will be available at page load for initial filtering). Static filters can be used in tokens as well for other data sources.","title":"Sample scenarios"},{"location":"getting_started/sample_scenarios/#sample-scenarios","text":"Wondering what you can do with this solution? Here are some demo videos of common usage scenarios for the Data Visualizer solution.","title":"Sample scenarios"},{"location":"getting_started/sample_scenarios/#build-a-complete-search-center","text":"In this demo video, we show you how to create a complete search center in a SharePoint page using the full solution Web Parts set (Search Box, Data Filters, Data Visualizer and Data Verticals). This is a typical scenario when you want to bypass the OOTB SharePoint search page limitations and integrate with your own information architecture.","title":"Build a complete search center"},{"location":"getting_started/sample_scenarios/#build-a-people-directory-using-the-microsoft-graph-data-source","text":"A classic use case in a SharePoint portal. This time, instead using the SharePoint search, we use the Microsoft Graph and the People API to lookup relevant people based on search box Web Part input keywords.","title":"Build a people directory using the Microsoft Graph data source"},{"location":"getting_started/sample_scenarios/#use-static-taxonomy-filters-with-the-sharepoint-search-data-source","text":"Static filters don't necessarily need to be connected to a Data Visualizer Web Part. They are different from 'Refinement' filters and they just send abitrary filter values to consumer Web Parts ignoring received values from the data source. In this demo, we show you a practical use case and how to use them, for instance retrieve data from the SharePoint search according to a specific taxonomy term in a specific terms set without any prior results fetched (meaning filter values will be available at page load for initial filtering). Static filters can be used in tokens as well for other data sources.","title":"Use static taxonomy filters with the SharePoint search data source"},{"location":"usage/data-filters/","text":"Data Filters Web Part \u00b6 The 'Data Filters' Web Part allows to filter the current results displayed in a 'Data Visualizer' Web Part. This component is higly configurable to meet you requirements and it works for all data sources. Configuration \u00b6 Connection \u00b6 To use the data filters, we must first connect it to one or multiple 'Data Visualizer' Web Parts. In the other hand, you must conenct back those Web Parts to the 'Data Filters' one. It is a two-ways connection . If you connect more than one Web Part, the filter values and counts will be merged for similar filter names: Example Data sources #1 and #1 expose respectively a 'FileType' filter with values and counts value1:1 , value2:1 for #1 and value2:1 , value4:1 for #2 and both are connected to the filters Web Part. In this case, a single 'FileType' filter name will be displayed (because the filter name is the same) with values value1:1 , value2:2 , value3:1 , value4:1 . If you select a value that is not present in a data source (ex: value1 for data source #2), you will simply get zero result. Filter settings \u00b6 The filter settings are as follow: Setting Description Display Name A friendly name for the filter Filter field The internal data source field to use as filter. Here you can select a field from the current data source (if data have been already retrieved) of type your own custom value (press enter to validate). Template The template to use to display filter values. The builtin templates are: Check box Date range Date interval Combo You can search a value directly in the list by typing keywords in the combo text field. Taxonomy picker You must configure a term set(s) before using this template by clicking on the tag icon next to the template: Filter type Specify if the filter is a 'static' filter or a 'refiner' filter. See below for more information. Expand by default If applicable for the selected template, display values as expanded. Show count If applicable for the selected template, display counts for values. Mutli values If applicable for the selected template, allow selection of multiple values. Operator between values If multi values is selected, the operator to use between values (OR/AND). Sort values by Sort values by name or by count. Sort direction Sort values in ascending/descending order. Operator between filters \u00b6 You can select the operator to use between filters (OR or AND). Filter types: 'Static' filter versus 'Refiner' filter \u00b6 The Web Part supports two types of filters ( 'Static' and 'Refiner' ). However, there are some differences that are important to understand between these two if you want to use them properly: Refiner : a 'Refiner' filter means the filter gets its values from the data source and sends back the selected ones the data source. If the data source has no result, there won't be any refiner values, simple as that. Static filter : a 'Static' filter means the filter doesn't care about filter values sent by the data source and provides its own arbitrary values regardless of input values. A date range picker or a taxonomy picker (or any picker) are good examples of what an 'Static' filter is. Such a filter do not need necessarily need a Data Visualizer connection. Use indexed property bag properties with taxonomny values \u00b6 This behavior only works with the SharePoint Search Data source and the Enabled localization flag activated. Using an indexed property bag value could be useful to store information about a SharePoint site or other element that can't be tagged with a taxonomy value directly. The 'Modern Data Visualizer' solution supports property bag properties values that use the following taxonomy value format to be able to filter on them (ex: a taxonomy multi values separated by a semicolon (;)): L0|#a2cf1afb-44b6-4cf4-bf37-642bb2e9bff3|Category 1;L0|#02e3406c0-1048-4bce-90eb-e7a51dfa7f31|Category3;L0|#07e094327-23d7-48af-9699-781eb26dc40f|Category2 These taxonomy values can then be used in the Data Filters Web Part using a RefinableStringXX search managed property to filter specific sites or elements. As an example, you can refer to the \"Create an end-to-end Office 365 groups provisioning solution\" tutorial GitHub project to leverage this format.","title":"Usage"},{"location":"usage/data-filters/#data-filters-web-part","text":"The 'Data Filters' Web Part allows to filter the current results displayed in a 'Data Visualizer' Web Part. This component is higly configurable to meet you requirements and it works for all data sources.","title":"Data Filters Web Part"},{"location":"usage/data-filters/#configuration","text":"","title":"Configuration"},{"location":"usage/data-filters/#connection","text":"To use the data filters, we must first connect it to one or multiple 'Data Visualizer' Web Parts. In the other hand, you must conenct back those Web Parts to the 'Data Filters' one. It is a two-ways connection . If you connect more than one Web Part, the filter values and counts will be merged for similar filter names: Example Data sources #1 and #1 expose respectively a 'FileType' filter with values and counts value1:1 , value2:1 for #1 and value2:1 , value4:1 for #2 and both are connected to the filters Web Part. In this case, a single 'FileType' filter name will be displayed (because the filter name is the same) with values value1:1 , value2:2 , value3:1 , value4:1 . If you select a value that is not present in a data source (ex: value1 for data source #2), you will simply get zero result.","title":"Connection"},{"location":"usage/data-filters/#filter-settings","text":"The filter settings are as follow: Setting Description Display Name A friendly name for the filter Filter field The internal data source field to use as filter. Here you can select a field from the current data source (if data have been already retrieved) of type your own custom value (press enter to validate). Template The template to use to display filter values. The builtin templates are: Check box Date range Date interval Combo You can search a value directly in the list by typing keywords in the combo text field. Taxonomy picker You must configure a term set(s) before using this template by clicking on the tag icon next to the template: Filter type Specify if the filter is a 'static' filter or a 'refiner' filter. See below for more information. Expand by default If applicable for the selected template, display values as expanded. Show count If applicable for the selected template, display counts for values. Mutli values If applicable for the selected template, allow selection of multiple values. Operator between values If multi values is selected, the operator to use between values (OR/AND). Sort values by Sort values by name or by count. Sort direction Sort values in ascending/descending order.","title":"Filter settings"},{"location":"usage/data-filters/#operator-between-filters","text":"You can select the operator to use between filters (OR or AND).","title":"Operator between filters"},{"location":"usage/data-filters/#filter-types-static-filter-versus-refiner-filter","text":"The Web Part supports two types of filters ( 'Static' and 'Refiner' ). However, there are some differences that are important to understand between these two if you want to use them properly: Refiner : a 'Refiner' filter means the filter gets its values from the data source and sends back the selected ones the data source. If the data source has no result, there won't be any refiner values, simple as that. Static filter : a 'Static' filter means the filter doesn't care about filter values sent by the data source and provides its own arbitrary values regardless of input values. A date range picker or a taxonomy picker (or any picker) are good examples of what an 'Static' filter is. Such a filter do not need necessarily need a Data Visualizer connection.","title":"Filter types: 'Static' filter versus 'Refiner' filter"},{"location":"usage/data-filters/#use-indexed-property-bag-properties-with-taxonomny-values","text":"This behavior only works with the SharePoint Search Data source and the Enabled localization flag activated. Using an indexed property bag value could be useful to store information about a SharePoint site or other element that can't be tagged with a taxonomy value directly. The 'Modern Data Visualizer' solution supports property bag properties values that use the following taxonomy value format to be able to filter on them (ex: a taxonomy multi values separated by a semicolon (;)): L0|#a2cf1afb-44b6-4cf4-bf37-642bb2e9bff3|Category 1;L0|#02e3406c0-1048-4bce-90eb-e7a51dfa7f31|Category3;L0|#07e094327-23d7-48af-9699-781eb26dc40f|Category2 These taxonomy values can then be used in the Data Filters Web Part using a RefinableStringXX search managed property to filter specific sites or elements. As an example, you can refer to the \"Create an end-to-end Office 365 groups provisioning solution\" tutorial GitHub project to leverage this format.","title":"Use indexed property bag properties with taxonomny values"},{"location":"usage/data-filters/layouts/","text":"Builtin layouts \u00b6 By default, the following layouts are provided: Vertical \u00b6 Display filters as a vertical bar: {: .center Horizontal \u00b6 Display filters as an horizontal bar. For instance, it fits nicely with 'Combo' filter templates. Layout options \u00b6 Setting Description Default value Preferred number of cards per row Specifiy the preferred number of filters to display per row when the required width space is available . The Web Part will always adjust the number of possible filters to display depending the available width. It means that if you set this value to '3' but you display the Web Part in small column, only 1 filter will be displayed. 3 Panel \u00b6 Display filters as an side panel. Useful to gain space on the page. Layout options \u00b6 Setting Description Default value Button label to display The label to display to open the panel. \"Show filters\". Panel header text The label to display to in the panel header. \"Filters\". Modal If enabled, the panel will be modal (you can't select elemtns outside the panel). True. Light dismiss If enabled, dismiss the panel when click outside. True. Panel size The filter panel size to display. Small (right) Debug \u00b6 The 'debug' layout allows you to see all relevant data used by filter templates during render. The template context object exposes the following properties: { \"filters\" : \"<Current filters to display in the UI (selected/unseslected)>\" , \"selectedFilters\" : \"<The current submitted filters>\" , \"instanceId\" : \"<The Web Part instance ID>\" , \"theme\" : \"<Current theme variables>\" , \"strings\" : \"<Localized strings that can be used in the Web Part>\" , \"selectedOnce\" : \"<Flag indicating if a filter value has been selected at least once by the use>\" , \"properties\" : \"<The filter Web Part properties>\" } Custom \u00b6 The 'custom' layout is the minimal layout to start with if you want to create your own customized UI from scratch. You can also start from an existing layout. Updating a builtin layout (ex: 'Horizontal', 'Vertical', etc.) will automatically switch the selected layout to 'Custom' with your modifications as content. All previous custom layout content will be overwritten . You have also the ability to use an external .html file to centralize your customizations. This file must be stored in an accessible location for uses (ex: a SharePoint document library with 'Read' permissions for concerned users). Unless you specify an external file, the template content is stored in the Web Part property bag. Updating the layout HTML template is a good option for minor UI updates (Ex: add a link, update colors, etc.). For more control over the UI, you may want to use the extensibility library feature","title":"Layouts"},{"location":"usage/data-filters/layouts/#builtin-layouts","text":"By default, the following layouts are provided:","title":"Builtin layouts"},{"location":"usage/data-filters/layouts/#vertical","text":"Display filters as a vertical bar: {: .center","title":"Vertical"},{"location":"usage/data-filters/layouts/#horizontal","text":"Display filters as an horizontal bar. For instance, it fits nicely with 'Combo' filter templates.","title":"Horizontal"},{"location":"usage/data-filters/layouts/#layout-options","text":"Setting Description Default value Preferred number of cards per row Specifiy the preferred number of filters to display per row when the required width space is available . The Web Part will always adjust the number of possible filters to display depending the available width. It means that if you set this value to '3' but you display the Web Part in small column, only 1 filter will be displayed. 3","title":"Layout options"},{"location":"usage/data-filters/layouts/#panel","text":"Display filters as an side panel. Useful to gain space on the page.","title":"Panel"},{"location":"usage/data-filters/layouts/#layout-options_1","text":"Setting Description Default value Button label to display The label to display to open the panel. \"Show filters\". Panel header text The label to display to in the panel header. \"Filters\". Modal If enabled, the panel will be modal (you can't select elemtns outside the panel). True. Light dismiss If enabled, dismiss the panel when click outside. True. Panel size The filter panel size to display. Small (right)","title":"Layout options"},{"location":"usage/data-filters/layouts/#debug","text":"The 'debug' layout allows you to see all relevant data used by filter templates during render. The template context object exposes the following properties: { \"filters\" : \"<Current filters to display in the UI (selected/unseslected)>\" , \"selectedFilters\" : \"<The current submitted filters>\" , \"instanceId\" : \"<The Web Part instance ID>\" , \"theme\" : \"<Current theme variables>\" , \"strings\" : \"<Localized strings that can be used in the Web Part>\" , \"selectedOnce\" : \"<Flag indicating if a filter value has been selected at least once by the use>\" , \"properties\" : \"<The filter Web Part properties>\" }","title":"Debug"},{"location":"usage/data-filters/layouts/#custom","text":"The 'custom' layout is the minimal layout to start with if you want to create your own customized UI from scratch. You can also start from an existing layout. Updating a builtin layout (ex: 'Horizontal', 'Vertical', etc.) will automatically switch the selected layout to 'Custom' with your modifications as content. All previous custom layout content will be overwritten . You have also the ability to use an external .html file to centralize your customizations. This file must be stored in an accessible location for uses (ex: a SharePoint document library with 'Read' permissions for concerned users). Unless you specify an external file, the template content is stored in the Web Part property bag. Updating the layout HTML template is a good option for minor UI updates (Ex: add a link, update colors, etc.). For more control over the UI, you may want to use the extensibility library feature","title":"Custom"},{"location":"usage/data-filters/layouts/custom/","text":"The 'custom' layout is the minimal layout to start with if you want to create your own customized UI from scratch. You can also start from an existing layout. Updating a builtin layout (ex: 'Horizontal', 'Vertical', etc.) will automatically switch the selected layout to 'Custom' with your modifications as content. All previous custom layout content will be overwritten . You have also the ability to use an external .html file to centralize your customizations. This file must be stored in an accessible location for uses (ex: a SharePoint document library with 'Read' permissions for concerned users). Unless you specify an external file, the template content is stored in the Web Part property bag. Updating the layout HTML template is a good option for minor UI updates (Ex: add a link, update colors, etc.). For more control over the UI, you may want to use the extensibility library feature.","title":"Custom"},{"location":"usage/data-filters/layouts/debug/","text":"The 'debug' layout allows you to see all relevant data used by filter templates during render. The template context object exposes the following properties: { \"filters\" : \"<Current filters to display in the UI (selected/unseslected)>\" , \"selectedFilters\" : \"<The current submitted filters>\" , \"instanceId\" : \"<The Web Part instance ID>\" , \"theme\" : \"<Current theme variables>\" , \"strings\" : \"<Localized strings that can be used in the Web Part>\" , \"selectedOnce\" : \"<Flag indicating if a filter value has been selected at least once by the use>\" , \"properties\" : \"<The filter Web Part properties>\" }","title":"Debug"},{"location":"usage/data-filters/layouts/horizontal/","text":"Display filters as an horizontal bar. For instance, it fits nicely with 'Combo' filter templates. Layout options \u00b6 Setting Description Default value Preferred number of cards per row Specifiy the preferred number of filters to display per row when the required width space is available . The Web Part will always adjust the number of possible filters to display depending the available width. It means that if you set this value to '3' but you display the Web Part in small column, only 1 filter will be displayed. 3.","title":"Horizontal"},{"location":"usage/data-filters/layouts/horizontal/#layout-options","text":"Setting Description Default value Preferred number of cards per row Specifiy the preferred number of filters to display per row when the required width space is available . The Web Part will always adjust the number of possible filters to display depending the available width. It means that if you set this value to '3' but you display the Web Part in small column, only 1 filter will be displayed. 3.","title":"Layout options"},{"location":"usage/data-filters/layouts/panel/","text":"Display filters as an side panel. Useful to gain space on the page. Layout options \u00b6 Setting Description Default value Button label to display The label to display to open the panel. \"Show filters\". Panel header text The label to display to in the panel header. \"Filters\". Modal If enabled, the panel will be modal (you can't select elemtns outside the panel). True. Light dismiss If enabled, dismiss the panel when click outside. True. Panel size The filter panel size to display. Small (right).","title":"Panel"},{"location":"usage/data-filters/layouts/panel/#layout-options","text":"Setting Description Default value Button label to display The label to display to open the panel. \"Show filters\". Panel header text The label to display to in the panel header. \"Filters\". Modal If enabled, the panel will be modal (you can't select elemtns outside the panel). True. Light dismiss If enabled, dismiss the panel when click outside. True. Panel size The filter panel size to display. Small (right).","title":"Layout options"},{"location":"usage/data-filters/layouts/vertical/","text":"Display filters as a vertical bar:","title":"Vertical"},{"location":"usage/data-verticals/","text":"Data Verticals Web Part \u00b6 The 'Data Verticals' Web Part allows to conditionally render a 'Data Visualizer' Web Part according to the selected vertical. It is a simple way to build a complete search center including multiple sources. Configuration \u00b6 The configuration of the 'Data Verticals' Web Part is fairly simple. The options for a vertical are as follow: Setting Description Tab Name The vertical name (i.e. tab) Office UI Fabric icon name The optional Office UI fabric icon to display for the tab. Refer to Office UI Fabric documentation to see all available icons. Is hyperlink If checked, the tab will behave as an hyperlink meaning it won't trigger any selected event. Link URL If the tab is an hyperlink, the link URL to use. Tokens {<TokenName>} are supported here. See tokens for more info. Open behavior If the tab is an hyperlink, the opening behavior (new tab or current tab). The 'Data Verticals' Web Part does not need to be connected to any Web Part. However, it is meant to be used by a 'Data Visualizer' Web Part to get it work. More info about configuration here . We recommend to configure the 'Data Visualizer' Web Parts that will use verticals before connecting them to the verticals Web Part .","title":"Usage"},{"location":"usage/data-verticals/#data-verticals-web-part","text":"The 'Data Verticals' Web Part allows to conditionally render a 'Data Visualizer' Web Part according to the selected vertical. It is a simple way to build a complete search center including multiple sources.","title":"Data Verticals Web Part"},{"location":"usage/data-verticals/#configuration","text":"The configuration of the 'Data Verticals' Web Part is fairly simple. The options for a vertical are as follow: Setting Description Tab Name The vertical name (i.e. tab) Office UI Fabric icon name The optional Office UI fabric icon to display for the tab. Refer to Office UI Fabric documentation to see all available icons. Is hyperlink If checked, the tab will behave as an hyperlink meaning it won't trigger any selected event. Link URL If the tab is an hyperlink, the link URL to use. Tokens {<TokenName>} are supported here. See tokens for more info. Open behavior If the tab is an hyperlink, the opening behavior (new tab or current tab). The 'Data Verticals' Web Part does not need to be connected to any Web Part. However, it is meant to be used by a 'Data Visualizer' Web Part to get it work. More info about configuration here . We recommend to configure the 'Data Visualizer' Web Parts that will use verticals before connecting them to the verticals Web Part .","title":"Configuration"},{"location":"usage/data-visualizer/","text":"Data Visualizer Web Part \u00b6 The 'Data Visualizer' Web Part is the fundamental building block of whole global solution. Its purpose is basically to get data from a specifc source and render them in a specific native or custom layout based on Handlebars and web components. This Web Part can be used alone or connected to other Web Parts to add dyanmic interactions (filters, search box or verticals). To use the Web Part on a SharePoint page: Edit your SharePoint modern page. Search for the 'aequos - Data Visualizer' Web Part and add it to your page: Configuration \u00b6 The data visualizer Web Part configuration is divided into four parts each corresponding to a property pane page: Data source : From where to retrieve the data. Includes the slots configuration and tokens usage . Layouts : How to render them. Connections : How the Web Part will be connected to others in the page. Extensibility : How the Web Part will be connected to others in the page.","title":"Usage"},{"location":"usage/data-visualizer/#data-visualizer-web-part","text":"The 'Data Visualizer' Web Part is the fundamental building block of whole global solution. Its purpose is basically to get data from a specifc source and render them in a specific native or custom layout based on Handlebars and web components. This Web Part can be used alone or connected to other Web Parts to add dyanmic interactions (filters, search box or verticals). To use the Web Part on a SharePoint page: Edit your SharePoint modern page. Search for the 'aequos - Data Visualizer' Web Part and add it to your page:","title":"Data Visualizer Web Part"},{"location":"usage/data-visualizer/#configuration","text":"The data visualizer Web Part configuration is divided into four parts each corresponding to a property pane page: Data source : From where to retrieve the data. Includes the slots configuration and tokens usage . Layouts : How to render them. Connections : How the Web Part will be connected to others in the page. Extensibility : How the Web Part will be connected to others in the page.","title":"Configuration"},{"location":"usage/data-visualizer/slots/","text":"The 'slots' are a very important part of this solution and their use becomes very handy when it comes to create your own layouts. The slots feature is available for all data sources, including builtin and custom ones. What is a 'slot'? \u00b6 A slot is a mapping between a data source specific field and a placeholder variable used in layout templates. To illustrate this concept, here are a single card from the 'Cards' layout. You can see how slots apply to the UI: Slot definitions will be replaced dynamically by the underlying field values you specified in the mappings list. In the end, from a template perspective, an URL is an URL regardless of the source. Slots are used individually depending of the requirements of the chosen layout. Why I would need them? \u00b6 They allow you to get your data source (custom or builtin) work with all templates without the need of refactoring them and to adapt your data source specific fields. Basically, it is a convenient, time saving feature making your templates reusable . Builtin slots \u00b6 Here are all the builtin slots the solution provides. Data sources may or may not define all these slots depending the nature of the source. Slot name Description Title Typically the title of an item in results. Path The absolute URL of an item. Summary A short description of the item. Date A date associated to the item. Can be for instance, the created date, modified date or publishing date. FileType The file type. This can be an extension (ex: docx ) or the complete path of the item including the file extension (ex: https://mycompany.sharepoint.com/sites/mysite/Shared Documents/MyFile.pdf ). This slot is mainly used to retrieve the correct file icon for the item. PreviewImageUrl The image thumbnail URL to display for an item. You can use the builtin AutoPreviewImageUrl field here to get a default image if applicable. PreviewUrl Same as preview image URL but for the interactive preview of the item (ex: a Word document). You can use the builtin AutoPreviewUrl field here to get a default image if applicable. In this case, the Web Part will use a generic Microsoft Graph URL to generate the preview. More information on supported file types . Author An author associated to the item. Tags Tags associated to the item. Can be for instance taxonomy terms. SiteId The SharePoint site ID associated to the item. With ListId and ItemId this value is used to generate the preview URL. ListId The SharePoint site ID associated to the item. With SiteId and ItemId this value is used to generate the preview URL. ItemId The SharePoint site ID associated to the item. With ListId and SiteId this value is used to generate the preview URL. IsFolder Indicate if the current item is a folder. The value here should be a true/false value or 0/1. PersonQuery Used for the people layout to get information about the current user dynamically. More info here . UserDisplayName Used by the people layout to display the user name. UserEmail Used by the people layout to display the user email. A slot can be empty. Define your custom slots \u00b6 In addition to builtin ones, you can add your own slots and use them in layouts. To do so, first add your slot in the list: And then use it in your templates using the following Handlebars expression: {{slot item @root.slots.<SlotName>}} slot : The Handlebars helper name. item : The current item containing the field value. @root.slots.<SlotName> : The corresponding slot mapping name (ex. @root.slots.Path to the URL). The slot value will be processed a string in your template.","title":"Slots"},{"location":"usage/data-visualizer/slots/#what-is-a-slot","text":"A slot is a mapping between a data source specific field and a placeholder variable used in layout templates. To illustrate this concept, here are a single card from the 'Cards' layout. You can see how slots apply to the UI: Slot definitions will be replaced dynamically by the underlying field values you specified in the mappings list. In the end, from a template perspective, an URL is an URL regardless of the source. Slots are used individually depending of the requirements of the chosen layout.","title":"What is a 'slot'?"},{"location":"usage/data-visualizer/slots/#why-i-would-need-them","text":"They allow you to get your data source (custom or builtin) work with all templates without the need of refactoring them and to adapt your data source specific fields. Basically, it is a convenient, time saving feature making your templates reusable .","title":"Why I would need them?"},{"location":"usage/data-visualizer/slots/#builtin-slots","text":"Here are all the builtin slots the solution provides. Data sources may or may not define all these slots depending the nature of the source. Slot name Description Title Typically the title of an item in results. Path The absolute URL of an item. Summary A short description of the item. Date A date associated to the item. Can be for instance, the created date, modified date or publishing date. FileType The file type. This can be an extension (ex: docx ) or the complete path of the item including the file extension (ex: https://mycompany.sharepoint.com/sites/mysite/Shared Documents/MyFile.pdf ). This slot is mainly used to retrieve the correct file icon for the item. PreviewImageUrl The image thumbnail URL to display for an item. You can use the builtin AutoPreviewImageUrl field here to get a default image if applicable. PreviewUrl Same as preview image URL but for the interactive preview of the item (ex: a Word document). You can use the builtin AutoPreviewUrl field here to get a default image if applicable. In this case, the Web Part will use a generic Microsoft Graph URL to generate the preview. More information on supported file types . Author An author associated to the item. Tags Tags associated to the item. Can be for instance taxonomy terms. SiteId The SharePoint site ID associated to the item. With ListId and ItemId this value is used to generate the preview URL. ListId The SharePoint site ID associated to the item. With SiteId and ItemId this value is used to generate the preview URL. ItemId The SharePoint site ID associated to the item. With ListId and SiteId this value is used to generate the preview URL. IsFolder Indicate if the current item is a folder. The value here should be a true/false value or 0/1. PersonQuery Used for the people layout to get information about the current user dynamically. More info here . UserDisplayName Used by the people layout to display the user name. UserEmail Used by the people layout to display the user email. A slot can be empty.","title":"Builtin slots"},{"location":"usage/data-visualizer/slots/#define-your-custom-slots","text":"In addition to builtin ones, you can add your own slots and use them in layouts. To do so, first add your slot in the list: And then use it in your templates using the following Handlebars expression: {{slot item @root.slots.<SlotName>}} slot : The Handlebars helper name. item : The current item containing the field value. @root.slots.<SlotName> : The corresponding slot mapping name (ex. @root.slots.Path to the URL). The slot value will be processed a string in your template.","title":"Define your custom slots"},{"location":"usage/data-visualizer/tokens/","text":"Tokens give you the ability to write dynamic queries for your data sources by using the special syntax {<TokenName>} . Where can I use tokens? \u00b6 You can use tokens in the following locations: Data Visualizer Web Part Builtin data sources SharePoint Search Query template field. Refinement filters field. SharePoint CAML Filter condition value using the dynamic menu. Anywhere in the CAML XML text if you are in 'Advanced' mode. OData URL field. Layouts In the 'See all' link. Anywhere in custom data sources code using the TokenService and resolveTokens() method. Data Verticals Web Part In the link URL when the vertical item is a link. Supported tokens (all data sources) \u00b6 Tokens are case insensitive Page tokens \u00b6 Token Definition {Page.<FieldName>} The value of a field on the page from where the query was issued. For example, if the page from where the query was issued contained a site column named \"ContentOwner,\" specifying {Page.ContentOwner} would allow you to query for the value of \"ContentOwner.\" FieldName is the internal name of the field. When used with taxonomy columns, use {Page.<FieldName>.Label} or {Page.<FieldName>.TermID} Connections tokens \u00b6 Tokens related to connected Web Parts in the Data Visualizer. Token Definition {inputQueryText} The query value entered into a search box on a page. The value depends on the configuration of input text connection of the Data Visualizer Web Part. {filters.<FilterName>} The current selected filters. You can use deep paths here to access properties. 'FilterName' corresponds to the filter name specified in the Data Filters Web Part (not the display name). Only single value taxonomy filters and data range filters are supported. For date range filters you can access start/end date values (as ISO8601 strings) using {filters.MyDateRangeFilter.startDate} or {filters.MyDateRangeFilter.endDate} . For taxonomy filters, the token {filters.MyTaxonomyFilter} will return the taxonomy item ID currently selected. {itemsCountPerPage} The number of items count per page configured in teh Web Part. Useful for the OData source to specify a $top={itemsCountPerPage} parameter. {startRow} The next start row number according to current paging. Useful for the OData source to specify a $skipToken={startRow} or $skip={startRow} parameters. Context tokens \u00b6 Token Definition {PageContext.<PropertyName>} Resolves current SPFx page context related tokens. You can use deep paths here to access properties. Ex: {PageContext.site.absoluteUrl} . {LegacyPageContext.<PropertyName>} Resolves current SPFx legacy page context related tokens. You can use deep paths here to access properties. Ex: {LegacyPageContext.aadTenantId} . {QueryString.<ParameterName>} A value from a query string in the URL of the current page. For example, if the URL of the current page contains a query string such as ItemNumber=567, you could obtain the value 567 by specifying {QueryString.ItemNumber} . {CurrentDisplayLanguage} The current display language based on MUI in ll-cc format . {CurrentDisplayLCID} Numeric value of the current display language based on MUI in ll-cc format . {TenantUrl} URL of the tenant (root site) Site, web, hub, etc. tokens \u00b6 Except for {Hub} , these a shortands to the {PageContext} tokens. They returns the same values. <PropertyName> is case sensitive . Token Definition {Site.<PropertyName>} Resolves current site related tokens. You can use the 'Debug' layout and the context property to see all available values for a site. Ex {Site.id._guid} or {Site.absoluteUrl} . {Hub.<PropertyName>} Resolves current hub site related tokens. Valid property names are {Hub.HubSiteId} , {Hub.Id} and {Hub.IsHubSite} . {Group.<PropertyName>} Resolves current Office 365 group related tokens. You can use the 'Debug' layout and the context property to see all available values for a site. {List.<PropertyName>} Resolves current list related tokens. Ex {List.id._guid} or {List.absoluteUrl} . {Web.<PropertyName>} Resolves current web related tokens You can use the 'Debug' layout and the context property to see all available values for a site. Ex {Web.id._guid} or {Web.absoluteUrl} . User tokens \u00b6 Token Definition {User} or {User.Name} Display name of the user who issued the query. For example, this value can be used to query content of the managed property Author. {User.Email} Email address of the user who issued the query. For example, this value can be used to query content of the managed property WorkEmail. {User.PreferredContentLanguage} Language as specified as Preferred Content Language in the profile of the user who issued the query. {User.PreferredDisplayLanguage} Language as specified as Preferred Display Language in the profile of the user who issued the query. {User.\\<property>} Any property from the user profile of the user who issued the query \u2014 for example, SPS-Interests , userprofile_guid , accountname , etc. including custom properties. Date tokens \u00b6 Token Definition {CurrentYear} Todays's date four digits, 2018 {CurrentMonth} Today's month, 1-12 {CurrentDate} Today's date, 1-31 {Today+/- \\<integer value for number of days>} A date calculated by adding/subtracting the specified number of days to/from the date when the query is issued. Date format is YYYY-MM-DD (Ex: {Today+5} ) SharePoint search query variables \u00b6 Supported variables \u00b6 The SharePoint Search engine already supports tokens by default (i.e query variables, ex: {Site.ID} ). You can use them in the Query template field only. To see the all the supported tokens natively, refer to the Microsoft documentation . Use the 'OR' operator \u00b6 To deal with mutli valued properties (like taxonomy multi or choices SharePoint fields), you can use the 'OR' operator syntax {|<property><operator><multi_values_property>} . The search query will be expanded to the following KQL query: ((<property><operator><value_1>) OR (<property><operator><value_2>) OR (<property><operator><value_3>) ...) Examples: Using an user profile multi values taxonomy property: {|owstaxidmetadataalltagsinfo:{User.SPS-Hashtags}} Using a page multi values taxonomy property: {|owstaxidmetadataalltagsinfo:{Page.myTaxonomyMultiColumn.TermID}} or {|owstaxidmetadataalltagsinfo:{Page.myTaxonomyMultiColumn.TermLabel}} Using a page multi values choice property: {|RefinableStringXX:{Page.myChoiceMultiColumn}} At any time, you can see the resolved query using the 'Debug' layout an inspecting the data.queryModification property.","title":"Tokens"},{"location":"usage/data-visualizer/tokens/#where-can-i-use-tokens","text":"You can use tokens in the following locations: Data Visualizer Web Part Builtin data sources SharePoint Search Query template field. Refinement filters field. SharePoint CAML Filter condition value using the dynamic menu. Anywhere in the CAML XML text if you are in 'Advanced' mode. OData URL field. Layouts In the 'See all' link. Anywhere in custom data sources code using the TokenService and resolveTokens() method. Data Verticals Web Part In the link URL when the vertical item is a link.","title":"Where can I use tokens?"},{"location":"usage/data-visualizer/tokens/#supported-tokens-all-data-sources","text":"Tokens are case insensitive","title":"Supported tokens (all data sources)"},{"location":"usage/data-visualizer/tokens/#page-tokens","text":"Token Definition {Page.<FieldName>} The value of a field on the page from where the query was issued. For example, if the page from where the query was issued contained a site column named \"ContentOwner,\" specifying {Page.ContentOwner} would allow you to query for the value of \"ContentOwner.\" FieldName is the internal name of the field. When used with taxonomy columns, use {Page.<FieldName>.Label} or {Page.<FieldName>.TermID}","title":"Page tokens"},{"location":"usage/data-visualizer/tokens/#connections-tokens","text":"Tokens related to connected Web Parts in the Data Visualizer. Token Definition {inputQueryText} The query value entered into a search box on a page. The value depends on the configuration of input text connection of the Data Visualizer Web Part. {filters.<FilterName>} The current selected filters. You can use deep paths here to access properties. 'FilterName' corresponds to the filter name specified in the Data Filters Web Part (not the display name). Only single value taxonomy filters and data range filters are supported. For date range filters you can access start/end date values (as ISO8601 strings) using {filters.MyDateRangeFilter.startDate} or {filters.MyDateRangeFilter.endDate} . For taxonomy filters, the token {filters.MyTaxonomyFilter} will return the taxonomy item ID currently selected. {itemsCountPerPage} The number of items count per page configured in teh Web Part. Useful for the OData source to specify a $top={itemsCountPerPage} parameter. {startRow} The next start row number according to current paging. Useful for the OData source to specify a $skipToken={startRow} or $skip={startRow} parameters.","title":"Connections tokens"},{"location":"usage/data-visualizer/tokens/#context-tokens","text":"Token Definition {PageContext.<PropertyName>} Resolves current SPFx page context related tokens. You can use deep paths here to access properties. Ex: {PageContext.site.absoluteUrl} . {LegacyPageContext.<PropertyName>} Resolves current SPFx legacy page context related tokens. You can use deep paths here to access properties. Ex: {LegacyPageContext.aadTenantId} . {QueryString.<ParameterName>} A value from a query string in the URL of the current page. For example, if the URL of the current page contains a query string such as ItemNumber=567, you could obtain the value 567 by specifying {QueryString.ItemNumber} . {CurrentDisplayLanguage} The current display language based on MUI in ll-cc format . {CurrentDisplayLCID} Numeric value of the current display language based on MUI in ll-cc format . {TenantUrl} URL of the tenant (root site)","title":"Context tokens"},{"location":"usage/data-visualizer/tokens/#site-web-hub-etc-tokens","text":"Except for {Hub} , these a shortands to the {PageContext} tokens. They returns the same values. <PropertyName> is case sensitive . Token Definition {Site.<PropertyName>} Resolves current site related tokens. You can use the 'Debug' layout and the context property to see all available values for a site. Ex {Site.id._guid} or {Site.absoluteUrl} . {Hub.<PropertyName>} Resolves current hub site related tokens. Valid property names are {Hub.HubSiteId} , {Hub.Id} and {Hub.IsHubSite} . {Group.<PropertyName>} Resolves current Office 365 group related tokens. You can use the 'Debug' layout and the context property to see all available values for a site. {List.<PropertyName>} Resolves current list related tokens. Ex {List.id._guid} or {List.absoluteUrl} . {Web.<PropertyName>} Resolves current web related tokens You can use the 'Debug' layout and the context property to see all available values for a site. Ex {Web.id._guid} or {Web.absoluteUrl} .","title":"Site, web, hub, etc. tokens"},{"location":"usage/data-visualizer/tokens/#user-tokens","text":"Token Definition {User} or {User.Name} Display name of the user who issued the query. For example, this value can be used to query content of the managed property Author. {User.Email} Email address of the user who issued the query. For example, this value can be used to query content of the managed property WorkEmail. {User.PreferredContentLanguage} Language as specified as Preferred Content Language in the profile of the user who issued the query. {User.PreferredDisplayLanguage} Language as specified as Preferred Display Language in the profile of the user who issued the query. {User.\\<property>} Any property from the user profile of the user who issued the query \u2014 for example, SPS-Interests , userprofile_guid , accountname , etc. including custom properties.","title":"User tokens"},{"location":"usage/data-visualizer/tokens/#date-tokens","text":"Token Definition {CurrentYear} Todays's date four digits, 2018 {CurrentMonth} Today's month, 1-12 {CurrentDate} Today's date, 1-31 {Today+/- \\<integer value for number of days>} A date calculated by adding/subtracting the specified number of days to/from the date when the query is issued. Date format is YYYY-MM-DD (Ex: {Today+5} )","title":"Date tokens"},{"location":"usage/data-visualizer/tokens/#sharepoint-search-query-variables","text":"","title":"SharePoint search query variables"},{"location":"usage/data-visualizer/tokens/#supported-variables","text":"The SharePoint Search engine already supports tokens by default (i.e query variables, ex: {Site.ID} ). You can use them in the Query template field only. To see the all the supported tokens natively, refer to the Microsoft documentation .","title":"Supported variables"},{"location":"usage/data-visualizer/tokens/#use-the-or-operator","text":"To deal with mutli valued properties (like taxonomy multi or choices SharePoint fields), you can use the 'OR' operator syntax {|<property><operator><multi_values_property>} . The search query will be expanded to the following KQL query: ((<property><operator><value_1>) OR (<property><operator><value_2>) OR (<property><operator><value_3>) ...) Examples: Using an user profile multi values taxonomy property: {|owstaxidmetadataalltagsinfo:{User.SPS-Hashtags}} Using a page multi values taxonomy property: {|owstaxidmetadataalltagsinfo:{Page.myTaxonomyMultiColumn.TermID}} or {|owstaxidmetadataalltagsinfo:{Page.myTaxonomyMultiColumn.TermLabel}} Using a page multi values choice property: {|RefinableStringXX:{Page.myChoiceMultiColumn}} At any time, you can see the resolved query using the 'Debug' layout an inspecting the data.queryModification property.","title":"Use the 'OR' operator"},{"location":"usage/data-visualizer/common/caching/","text":"For all data sources, you have the option to cache the data to improve performances during the first page load. When enabled, only the first page of initial results is cached . By default, a 5 minutes cache is applied. However, you can set your own duration. At any moment you can clear the cache by clicking on the 'Clear cache' button to start over. You data will be cached on the next page refresh. Notice the data are won't be put in the cache when: A filter is selected. The current page number is greater than 1. The input query text changes. Data in the cache are stored in the browser local storage under the following name: aequosDataVisualizer_DataSourceDataFirstPage_<WebPart instance ID>.","title":"Caching"},{"location":"usage/data-visualizer/common/common/","text":"Common general options for all data sources Setting Description Default value Do not fetch the data at page load If enabled, the data won't be fetched during the first load of the Web Part. Use this setting if you want to trigger a data fetch only on dynamic external events like selected static filters or a new search box input. False.","title":"Common"},{"location":"usage/data-visualizer/common/paging/","text":"The paging options are available for all data sources. Setting Description Default value Show paging Hide or display the paging control. Number of items per page Specify the number of items to show per page. Depending of the data source, this value will be handled automatically or manually. For instance, the SharePoint Search and SharePoint CAML will take care of this value automatically. However, the OData data source can use this value by usin the {itemsCountPerPage} token to build a dynamic query (ex: $top={itemsCountPerPage} ). Number of pages to display in range Determines the number of pages to display in range. Hide navigation buttons (prev page, next page) Self explicit. Hide first/last navigation buttons Self explicit. Hide navigation buttons (prev, next, first, last) if they are disabled. Self explicit. Data source paging behaviors Paging is available for all data sources. However, they can handle it differently. Data source Paging behavior Comments SharePoint CAML Dynamic Paging is done calculating the next page link based of the last item ID of the current results set. Therefore, pages are \"discovered\" along the way when browsing, meaning you can only increase the page number by one every time. SharePoint Search Dynamic All page links are pre-calculated since the search engine returns the total items count matching the query regardless the page number. It means you can directly go the last page of results matching the query if you want. OData Dynamic/Static Dynamic when using the @odata.nextLink information if present ('server-side paging') or $skip or $skipToken in the URL to determine the next page link URL. When dynamic, the pages are \"discovered\" along the way when browsing. Static when using the items array directly. Static Data Static Paging is done statically base on the items array.","title":"Paging"},{"location":"usage/data-visualizer/connections/","text":"Connections \u00b6 The 'Data Visualizer' Web Part can be used alone but also connected to other Web Parts: Input query text \u00b6 The input query text can be either static or dynamic. In all cases, this value can be used using the {inputQueryText} token. See tokens for more information. Static value It corresponds to a free text keywords that you want to pass to your data source: This value will be applied every time to your data source. Dynamic value You can connect a dynamic value from the page environment (ex: a query string parameter, the top bar search box, etc.) or a search box already added to the page. Optionaly, you can set a default query text when there is no value for the connected source (ex: an empty search box at page load). Filters Web Part \u00b6 For static filters (i.e. taxonomy picker and date range filter templates), this value can be used using the {filters.<FilterName>} token. See tokens for more information. Verticals \u00b6 When you connect the Web Part to a Data Verticals one, you must specify on which vertical the Web Part content should be displayed. This mechanism allows to build a complete search center using verticals tabs.","title":"Connections"},{"location":"usage/data-visualizer/connections/#connections","text":"The 'Data Visualizer' Web Part can be used alone but also connected to other Web Parts:","title":"Connections"},{"location":"usage/data-visualizer/connections/#input-query-text","text":"The input query text can be either static or dynamic. In all cases, this value can be used using the {inputQueryText} token. See tokens for more information. Static value It corresponds to a free text keywords that you want to pass to your data source: This value will be applied every time to your data source. Dynamic value You can connect a dynamic value from the page environment (ex: a query string parameter, the top bar search box, etc.) or a search box already added to the page. Optionaly, you can set a default query text when there is no value for the connected source (ex: an empty search box at page load).","title":"Input query text"},{"location":"usage/data-visualizer/connections/#filters-web-part","text":"For static filters (i.e. taxonomy picker and date range filter templates), this value can be used using the {filters.<FilterName>} token. See tokens for more information.","title":"Filters Web Part"},{"location":"usage/data-visualizer/connections/#verticals","text":"When you connect the Web Part to a Data Verticals one, you must specify on which vertical the Web Part content should be displayed. This mechanism allows to build a complete search center using verticals tabs.","title":"Verticals"},{"location":"usage/data-visualizer/data-sources/","text":"Data sources \u00b6 Builtin data sources \u00b6 By default, the following data sources are provided: Be careful, when you switch the data source in the property pane, all the previous data source properties are lost. We do this to avoid polluting the Web Part property bag with multiple useless configurations. SharePoint Search \u00b6 The 'SharePoint Search' data source retrieve items from the SharePoint search engine. The SharePoint search is different from the Microsoft Graph search. Source configuration \u00b6 Setting Description Default value Query text The input query text to pass to the search engine. This setting is not configurable directly in the data source options. To enable it you use go the the third configuration page of the Web Part and selected either a static or dynamic value (Ex: from a connected search box Web Part). See the connection documentation for more information on how to configure this option. This value can be then used in the Query template using the {searchTerms} token. Also this value can be a Keyword Query Language expression (KQL) . None. Query template The search query template to use. It allows you to use dynamic tokens according to the context or specifiy conditions that should always apply to the query. {searchTerms} Result source ID Can be either a builtin result source ID listed in the dropdown or a custom result source GUID that you type. In this case to take effect, you must press 'Enter' to save the value. LocalSharePointResults Selected properties The SharePoint managed properties to retrieve from the results. They can be used with the same name in layouts and slots afterwards. Title Path DefaultEncodingURL FileType HitHighlightedSummary AuthorOWSUSER owstaxidmetadataalltagsinfo Created UniqueID NormSiteID NormListID NormUniqueID ContentTypeId UserName JobTitle WorkPhone Sort order The initial results sort order. You will be able to select only 'Sortable' managed properties here. Make sure the selected properties satisfy this criteria in the SharePoint search schema . None. Refinement filters The initial refinement filters to apply to the query. Both KQL (Keyword Query Language) and FQL ( Fast Query Language ) expressions work here (Ex: KQL FileType:docx , FQL: FileType:equals(\"docx\") ). They will be apply every time to the current search query regarless selected filters from connected Web Parts. Notice: for strign expressions, use \" isntead of ' . None. Language of the search request The language to use for the search request. By default the search request will be made using the current user interface language. This parameter is mainly use to process diacritics, plurals, etc. correctly according to the language. Current UI language. Enable query rules Whether or not apply SharePoint query rules. False. Include OneDrive for Business results Whether or not include OneDrive for business results. False. Enable audience targeting Whether or not results should be targeted according to the audiences that the current user belongs to. More information about modern audiences and how to configure them . False. Enable localization If enabled, the Web Part will try to translate the taxonomy term IDs found in result item properties and refinement values to their corresponding label according to the curent UI language. To get it work, you must map a new refinable managed property associated with ows_taxId_ crawled property and turn this toggle 'on': If enabled and depending how many items are currently displayed, this could be slightly decrease loading performances. To use translated values in your template, you must use the ' Auto + <property_name> ' property format instead of the original property name . For instance, to use translated values of the ' owstaxidmetadataalltagsinfo ' property, you must use the ' Auto owstaxidmetadataalltagsinfo' auto created property. False. SharePoint CAML \u00b6 The 'SharePoint CAML' data source allows you to rerieve items uisng a CAML query built using the interative builder or using an XML text. Source configuration \u00b6 A CAML query always apply on a SharePoint list or document library. Thus, you must first select one using the following dropdowns: Setting Description Default value Site The site collection containing the list or document library By default, it uses the current site collection. However, you can disable the checkmark and search for a specific site. This control uses SharePoint search to get sites looking in the Title and Path managed properties. It means if your sites has been newly created it may not appear immediatly until indexed. Web The web containing the list. It can be the root web of the selected site collecion or an other subsite. '/' (root web) List The list where the CAML query will be applied. None. CAML Query configuration \u00b6 To build your CAML query, you have the choice to use the interactive builder or start from scratch using your own XML. See the query schema for CAML to get started. Using the builder \u00b6 Setting Description Default value View Fields The item fields to return from the. They will be available in your templates with the same name. UniqueId EncodedAbsUrl FileRef File_x0020_Type FileLeafRef Name Author Created Order by field An optional field to sort results. If a field is selected, you have the option to select ascending or descending order. None. Search within folders Enable this option if you want to search in folders recursively in your list or document library. False. Filters The filter condition builder. From here you can select: Field : the list to apply the condition Operator : the operator to use. Supported operators are \"Equals,Does not equal, Is greater than, Is less than, Is grater or equal to, Is less or equal to, Is null, Is not null, Begins with and Contains\" . Operator choices are automatically adjusted regarding the selected field type. Value : the value to use for the condition. You can use a plain text/date/taxonomy value here (depending of the selected field type) or use a dynamic token. For the second option, enable the corresponding checkbox to have access to the dynamic tokens menu. Notice that not all available tokens are listed here. If the token you want to use is not is the list, you can add it using the 'Custom value' option and press enter. All supported tokens can be found here Using the advanced mode \u00b6 In advanced mode, you are responsible to wrtie your own CAML query as XML text. You can use tokens {<tokenName>} directly in the text to create dynamic queries. Tip: to help you get started, you can start writing your query using the builder and then switch to 'Advanced mode'. This way, you will see the underlying generated query. However, from the moment where the CAML query text in advanced mode differ from the one generated by the builder, the builder settings will be lost if you switch back to that mode . OData \u00b6 The OData data source allows you to get data from the following APIs Microsoft Graph : both v1.0 or beta endpoints. SharePoint REST API : the current site or an other site in your tenant. Supports v1.0 or v2.0 , Azure Active Directoy secured API like an Azure function, Azure Web Application, etc. Anonymous API Microsoft Graph \u00b6 The URL supports the following formats. Tokens can also be used to construct your URL: * me * /me * https://graph.microsoft.com/v1.0/me * https://graph.microsoft.com/beta/me * me/events?$filter=startswith(subject, 'ship') Before using a Microsoft Graph resource, you need to ensure you allowed the correct API permissions at tenant level . Because you can't define API permissions through the Web Part package declaratively (i.e webApiPermissions ), we recommend you to use the PnP Office 365 CLI to add correct permissions for your API: o365$ spo serviceprincipal grant add --resource 'Microsoft Graph' --scope 'Mail.Read' SharePoint REST API \u00b6 The URL supports the following formats. Tokens can also be used to construct your URL /_api/ (will target the current root site if you don't specify anything) /_api/ (ex: http://mycompany.sharepoint.com/sites/intranet/_api/lists) /_api/v2.0/sites/{site.id}/drive/list/items?expand=fields(select=FileLeafRef,BaseName,FileRef,FSObjType)&$top={itemsCountPerPage} etc. You can also use query parameters supported by the API Azure Active Directory secured API \u00b6 Follow this procedure to set up your Azure Active Directory application. Don't forget to add at least the ' user impersonation ' permission to be able to call the API endpoint. Before using an AAD secured resource, you need to ensure you allowed the correct API permissions at tenant level . Because you can't define API permissions through the Web Part package declaratively (i.e webApiPermissions ), we recommend you to use the PnP Office 365 CLI to add correct permissions for your API: o365$ spo serviceprincipal grant add --resource '<aad_app_display_name>' --scope 'user_impersonation' Allow your SharePoint domain (ex: https://mycompany.sharepoint.com) as allowed origin in the service or application CORS (Cross-origin resource sharing) settings. Here a procedure for an Azure function . Anonymous \u00b6 You can also call an API endpoint with no specific authentifcation like an Azure HTTP trigger Function with function code. By default, we use the demo OData v4 services provided by https://www.odata.org/odata-services/ to demonstrate the capability. Set HTTP headers or body \u00b6 The only method allowed are GET or POST . For each, you have the ability so set your own HTTP headers. The value must be a valid JSON value : { \"Content-Type\" : \"application/json;odata=verbose\" , \"Accept\" : \"application/json\" , ... } If you specify a POST request, you can also benefit of builtin tokens . { \"ItemsCount\" : \"{itemsCountPerPage}\" , \"MyProperty\" : \"My Value\" , ... } Pagination \u00b6 For each API type, you can control how the results will be paginated in order to improve performances. Dynamic paging \u00b6 Use a Dynamic paging if the underlying API you are using supports paging mechanisms (likely using $top and $skip or $skipToken tokens, for instance Microsoft Graph or SharePoint REST API). Use server-side paging \u00b6 Some APIs like Microsoft Graph or the SharePoint REST API provide a server-side paging functionality (see https://docs.microsoft.com/en-us/graph/paging for more information). Basically, it allows you to paginate results more easily by using a pre-calculated next page link URL instead of building it manually. If checked, the paging will be based on the @odata.nextLink value from the HTTP response. It means when you will click on the next page button, this value will be used to get the next set of results. Thus, the items count and paging information (i.e first page, current page, next page, previous page, and last page) will be determined automatically as long as you move through pages. If unchecked, it will be your URL to be executed to get the next page results. In this last scenario you likely want to provide a dynamic URL using builtin tokens . Example With server-side paging enabled using @odata.nextLink : /me/messages?$top={itemsCountPerPage} or /me/messages?$top=2 Here, the $skip token will be provided automatically in the @odata.nextLink so you don't have to provide it in the URL. Without server-side paging enabled using $top and $skip tokens: <your_sharepoint_site_url>/_api/lists?$top={itemsCountPerPage}&$skip={startRow} If you want to control the paging by yourself, you will have to provide a $skip value manually using builtin tokens. You can use the {itemsCountPerPage} and {startRow} tokens where {startRow} corresponds to the number or items per page * the current page number (start from 0) and {itemsCountPerPage} to the number of items per page configured in the property pane. The URL and the items count will be resolved dynamically based on these token values as long as you move through pages. Because we can't determine the total number of items, in some cases, the last page could be empty. It happens for example when the 'total items count'/'items count per page' is even (i.e. exact same number of items for each page). Static paging \u00b6 If performance is not an issue (i.e for a small ammount of data), you can also set a static paging on your data based on a results array. In this case, you will have to provide the response field to use as the array of items to get the total items count. Then, in the common paging settings, configure the desired number items per page to generate pages dynamically. If you use static paging, don't forget to add a fixed count in your url /me/messages?$top=10 instead of /me/messages?$top={itemsCountPerPage} . Otherwise, you will get only one page every time. Static Data \u00b6 The 'Static data' is the simplest data source you can use. With this data ssource, items are retrieved from a static JSON object that you define and does not require any asynchronous call. When to use this data source? \u00b6 This data source allows you to define your own data schema (i.e. fields) that you can consume in your template. However, to be consumed by templates, the data must follow this JSON strcuture: { \"items\" : [ { \"<any_property>\" : \"<any_value_of_any_type>\" , ... } ], \"<any_other_property>\" : \"<any_value_of_any_type>\" , ... } Don't forget the quotes '\"' for property names. Even if you don't return items, you must specifiy this property. In this case, pass an empty array. How to use this data source: a practical example \u00b6 Let say you want to display a static list of useful links for your organization on the home page. Open the code editor and enter the following data: The data could be look like this: { \"items\" : [ { \"linkName\" : \"My Company Web Site\" , \"linkHref\" : \"http://mycompany.com\" , \"linkOpenBehavior\" : \"_blank\" }, { \"linkName\" : \"My Company Web Site\" , \"linkHref\" : \"http://mycompany.com\" , \"linkOpenBehavior\" : \"_blank\" } ], \"numberOfLinks\" : \"2\" } Now to consume this data, you can either start from an existing layout, or use a custom one. See the templating documentation to know more Common settings \u00b6 Common general options for all data sources Setting Description Default value Do not fetch the data at page load If enabled, the data won't be fetched during the first load of the Web Part. Use this setting if you want to trigger a data fetch only on dynamic external events like selected static filters or a new search box input. False Paging \u00b6 The paging options are available for all data sources. Setting Description Default value Show paging Hide or display the paging control. Number of items per page Specify the number of items to show per page. Depending of the data source, this value will be handled automatically or manually. For instance, the SharePoint Search and SharePoint CAML will take care of this value automatically. However, the OData data source can use this value by usin the {itemsCountPerPage} token to build a dynamic query (ex: $top={itemsCountPerPage} ). Number of pages to display in range Determines the number of pages to display in range. Hide navigation buttons (prev page, next page) Self explicit. Hide first/last navigation buttons Self explicit. Hide navigation buttons (prev, next, first, last) if they are disabled. Self explicit. Data source paging behaviors Paging is available for all data sources. However, they can handle it differently. Data source Paging behavior Comments SharePoint CAML Dynamic Paging is done calculating the next page link based of the last item ID of the current results set. Therefore, pages are \"discovered\" along the way when browsing, meaning you can only increase the page number by one every time. SharePoint Search Dynamic All page links are pre-calculated since the search engine returns the total items count matching the query regardless the page number. It means you can directly go the last page of results matching the query if you want. OData Dynamic/Static Dynamic when using the @odata.nextLink information if present ('server-side paging') or $skip or $skipToken in the URL to determine the next page link URL. When dynamic, the pages are \"discovered\" along the way when browsing. Static when using the items array directly. Static Data Static Paging is done statically base on the items array Caching \u00b6 For all data sources, you have the option to cache the data to improve performances during the first page load. When enabled, only the first page of initial results is cached . By default, a 5 minutes cache is applied. However, you can set your own duration. At any moment you can clear the cache by clicking on the 'Clear cache' button to start over. You data will be cached on the next page refresh. Notice the data are won't be put in the cache when: A filter is selected. The current page number is greater than 1. The input query text changes. Data in the cache are stored in the browser local storage under the following name: aequosDataVisualizer_DataSourceDataFirstPage_<WebPart instance ID>","title":"Data sources"},{"location":"usage/data-visualizer/data-sources/#data-sources","text":"","title":"Data sources"},{"location":"usage/data-visualizer/data-sources/#builtin-data-sources","text":"By default, the following data sources are provided: Be careful, when you switch the data source in the property pane, all the previous data source properties are lost. We do this to avoid polluting the Web Part property bag with multiple useless configurations.","title":"Builtin data sources"},{"location":"usage/data-visualizer/data-sources/#sharepoint-search","text":"The 'SharePoint Search' data source retrieve items from the SharePoint search engine. The SharePoint search is different from the Microsoft Graph search.","title":"SharePoint Search"},{"location":"usage/data-visualizer/data-sources/#source-configuration","text":"Setting Description Default value Query text The input query text to pass to the search engine. This setting is not configurable directly in the data source options. To enable it you use go the the third configuration page of the Web Part and selected either a static or dynamic value (Ex: from a connected search box Web Part). See the connection documentation for more information on how to configure this option. This value can be then used in the Query template using the {searchTerms} token. Also this value can be a Keyword Query Language expression (KQL) . None. Query template The search query template to use. It allows you to use dynamic tokens according to the context or specifiy conditions that should always apply to the query. {searchTerms} Result source ID Can be either a builtin result source ID listed in the dropdown or a custom result source GUID that you type. In this case to take effect, you must press 'Enter' to save the value. LocalSharePointResults Selected properties The SharePoint managed properties to retrieve from the results. They can be used with the same name in layouts and slots afterwards. Title Path DefaultEncodingURL FileType HitHighlightedSummary AuthorOWSUSER owstaxidmetadataalltagsinfo Created UniqueID NormSiteID NormListID NormUniqueID ContentTypeId UserName JobTitle WorkPhone Sort order The initial results sort order. You will be able to select only 'Sortable' managed properties here. Make sure the selected properties satisfy this criteria in the SharePoint search schema . None. Refinement filters The initial refinement filters to apply to the query. Both KQL (Keyword Query Language) and FQL ( Fast Query Language ) expressions work here (Ex: KQL FileType:docx , FQL: FileType:equals(\"docx\") ). They will be apply every time to the current search query regarless selected filters from connected Web Parts. Notice: for strign expressions, use \" isntead of ' . None. Language of the search request The language to use for the search request. By default the search request will be made using the current user interface language. This parameter is mainly use to process diacritics, plurals, etc. correctly according to the language. Current UI language. Enable query rules Whether or not apply SharePoint query rules. False. Include OneDrive for Business results Whether or not include OneDrive for business results. False. Enable audience targeting Whether or not results should be targeted according to the audiences that the current user belongs to. More information about modern audiences and how to configure them . False. Enable localization If enabled, the Web Part will try to translate the taxonomy term IDs found in result item properties and refinement values to their corresponding label according to the curent UI language. To get it work, you must map a new refinable managed property associated with ows_taxId_ crawled property and turn this toggle 'on': If enabled and depending how many items are currently displayed, this could be slightly decrease loading performances. To use translated values in your template, you must use the ' Auto + <property_name> ' property format instead of the original property name . For instance, to use translated values of the ' owstaxidmetadataalltagsinfo ' property, you must use the ' Auto owstaxidmetadataalltagsinfo' auto created property. False.","title":"Source configuration"},{"location":"usage/data-visualizer/data-sources/#sharepoint-caml","text":"The 'SharePoint CAML' data source allows you to rerieve items uisng a CAML query built using the interative builder or using an XML text.","title":"SharePoint CAML"},{"location":"usage/data-visualizer/data-sources/#source-configuration_1","text":"A CAML query always apply on a SharePoint list or document library. Thus, you must first select one using the following dropdowns: Setting Description Default value Site The site collection containing the list or document library By default, it uses the current site collection. However, you can disable the checkmark and search for a specific site. This control uses SharePoint search to get sites looking in the Title and Path managed properties. It means if your sites has been newly created it may not appear immediatly until indexed. Web The web containing the list. It can be the root web of the selected site collecion or an other subsite. '/' (root web) List The list where the CAML query will be applied. None.","title":"Source configuration"},{"location":"usage/data-visualizer/data-sources/#caml-query-configuration","text":"To build your CAML query, you have the choice to use the interactive builder or start from scratch using your own XML. See the query schema for CAML to get started.","title":"CAML Query configuration"},{"location":"usage/data-visualizer/data-sources/#using-the-builder","text":"Setting Description Default value View Fields The item fields to return from the. They will be available in your templates with the same name. UniqueId EncodedAbsUrl FileRef File_x0020_Type FileLeafRef Name Author Created Order by field An optional field to sort results. If a field is selected, you have the option to select ascending or descending order. None. Search within folders Enable this option if you want to search in folders recursively in your list or document library. False. Filters The filter condition builder. From here you can select: Field : the list to apply the condition Operator : the operator to use. Supported operators are \"Equals,Does not equal, Is greater than, Is less than, Is grater or equal to, Is less or equal to, Is null, Is not null, Begins with and Contains\" . Operator choices are automatically adjusted regarding the selected field type. Value : the value to use for the condition. You can use a plain text/date/taxonomy value here (depending of the selected field type) or use a dynamic token. For the second option, enable the corresponding checkbox to have access to the dynamic tokens menu. Notice that not all available tokens are listed here. If the token you want to use is not is the list, you can add it using the 'Custom value' option and press enter. All supported tokens can be found here","title":"Using the builder"},{"location":"usage/data-visualizer/data-sources/#using-the-advanced-mode","text":"In advanced mode, you are responsible to wrtie your own CAML query as XML text. You can use tokens {<tokenName>} directly in the text to create dynamic queries. Tip: to help you get started, you can start writing your query using the builder and then switch to 'Advanced mode'. This way, you will see the underlying generated query. However, from the moment where the CAML query text in advanced mode differ from the one generated by the builder, the builder settings will be lost if you switch back to that mode .","title":"Using the advanced mode"},{"location":"usage/data-visualizer/data-sources/#odata","text":"The OData data source allows you to get data from the following APIs Microsoft Graph : both v1.0 or beta endpoints. SharePoint REST API : the current site or an other site in your tenant. Supports v1.0 or v2.0 , Azure Active Directoy secured API like an Azure function, Azure Web Application, etc. Anonymous API","title":"OData"},{"location":"usage/data-visualizer/data-sources/#microsoft-graph","text":"The URL supports the following formats. Tokens can also be used to construct your URL: * me * /me * https://graph.microsoft.com/v1.0/me * https://graph.microsoft.com/beta/me * me/events?$filter=startswith(subject, 'ship') Before using a Microsoft Graph resource, you need to ensure you allowed the correct API permissions at tenant level . Because you can't define API permissions through the Web Part package declaratively (i.e webApiPermissions ), we recommend you to use the PnP Office 365 CLI to add correct permissions for your API: o365$ spo serviceprincipal grant add --resource 'Microsoft Graph' --scope 'Mail.Read'","title":"Microsoft Graph"},{"location":"usage/data-visualizer/data-sources/#sharepoint-rest-api","text":"The URL supports the following formats. Tokens can also be used to construct your URL /_api/ (will target the current root site if you don't specify anything) /_api/ (ex: http://mycompany.sharepoint.com/sites/intranet/_api/lists) /_api/v2.0/sites/{site.id}/drive/list/items?expand=fields(select=FileLeafRef,BaseName,FileRef,FSObjType)&$top={itemsCountPerPage} etc. You can also use query parameters supported by the API","title":"SharePoint REST API"},{"location":"usage/data-visualizer/data-sources/#azure-active-directory-secured-api","text":"Follow this procedure to set up your Azure Active Directory application. Don't forget to add at least the ' user impersonation ' permission to be able to call the API endpoint. Before using an AAD secured resource, you need to ensure you allowed the correct API permissions at tenant level . Because you can't define API permissions through the Web Part package declaratively (i.e webApiPermissions ), we recommend you to use the PnP Office 365 CLI to add correct permissions for your API: o365$ spo serviceprincipal grant add --resource '<aad_app_display_name>' --scope 'user_impersonation' Allow your SharePoint domain (ex: https://mycompany.sharepoint.com) as allowed origin in the service or application CORS (Cross-origin resource sharing) settings. Here a procedure for an Azure function .","title":"Azure Active Directory secured API"},{"location":"usage/data-visualizer/data-sources/#anonymous","text":"You can also call an API endpoint with no specific authentifcation like an Azure HTTP trigger Function with function code. By default, we use the demo OData v4 services provided by https://www.odata.org/odata-services/ to demonstrate the capability.","title":"Anonymous"},{"location":"usage/data-visualizer/data-sources/#set-http-headers-or-body","text":"The only method allowed are GET or POST . For each, you have the ability so set your own HTTP headers. The value must be a valid JSON value : { \"Content-Type\" : \"application/json;odata=verbose\" , \"Accept\" : \"application/json\" , ... } If you specify a POST request, you can also benefit of builtin tokens . { \"ItemsCount\" : \"{itemsCountPerPage}\" , \"MyProperty\" : \"My Value\" , ... }","title":"Set HTTP headers or body"},{"location":"usage/data-visualizer/data-sources/#pagination","text":"For each API type, you can control how the results will be paginated in order to improve performances.","title":"Pagination"},{"location":"usage/data-visualizer/data-sources/#dynamic-paging","text":"Use a Dynamic paging if the underlying API you are using supports paging mechanisms (likely using $top and $skip or $skipToken tokens, for instance Microsoft Graph or SharePoint REST API).","title":"Dynamic paging"},{"location":"usage/data-visualizer/data-sources/#use-server-side-paging","text":"Some APIs like Microsoft Graph or the SharePoint REST API provide a server-side paging functionality (see https://docs.microsoft.com/en-us/graph/paging for more information). Basically, it allows you to paginate results more easily by using a pre-calculated next page link URL instead of building it manually. If checked, the paging will be based on the @odata.nextLink value from the HTTP response. It means when you will click on the next page button, this value will be used to get the next set of results. Thus, the items count and paging information (i.e first page, current page, next page, previous page, and last page) will be determined automatically as long as you move through pages. If unchecked, it will be your URL to be executed to get the next page results. In this last scenario you likely want to provide a dynamic URL using builtin tokens . Example With server-side paging enabled using @odata.nextLink : /me/messages?$top={itemsCountPerPage} or /me/messages?$top=2 Here, the $skip token will be provided automatically in the @odata.nextLink so you don't have to provide it in the URL. Without server-side paging enabled using $top and $skip tokens: <your_sharepoint_site_url>/_api/lists?$top={itemsCountPerPage}&$skip={startRow} If you want to control the paging by yourself, you will have to provide a $skip value manually using builtin tokens. You can use the {itemsCountPerPage} and {startRow} tokens where {startRow} corresponds to the number or items per page * the current page number (start from 0) and {itemsCountPerPage} to the number of items per page configured in the property pane. The URL and the items count will be resolved dynamically based on these token values as long as you move through pages. Because we can't determine the total number of items, in some cases, the last page could be empty. It happens for example when the 'total items count'/'items count per page' is even (i.e. exact same number of items for each page).","title":"Use server-side paging"},{"location":"usage/data-visualizer/data-sources/#static-paging","text":"If performance is not an issue (i.e for a small ammount of data), you can also set a static paging on your data based on a results array. In this case, you will have to provide the response field to use as the array of items to get the total items count. Then, in the common paging settings, configure the desired number items per page to generate pages dynamically. If you use static paging, don't forget to add a fixed count in your url /me/messages?$top=10 instead of /me/messages?$top={itemsCountPerPage} . Otherwise, you will get only one page every time.","title":"Static paging"},{"location":"usage/data-visualizer/data-sources/#static-data","text":"The 'Static data' is the simplest data source you can use. With this data ssource, items are retrieved from a static JSON object that you define and does not require any asynchronous call.","title":"Static Data"},{"location":"usage/data-visualizer/data-sources/#when-to-use-this-data-source","text":"This data source allows you to define your own data schema (i.e. fields) that you can consume in your template. However, to be consumed by templates, the data must follow this JSON strcuture: { \"items\" : [ { \"<any_property>\" : \"<any_value_of_any_type>\" , ... } ], \"<any_other_property>\" : \"<any_value_of_any_type>\" , ... } Don't forget the quotes '\"' for property names. Even if you don't return items, you must specifiy this property. In this case, pass an empty array.","title":"When to use this data source?"},{"location":"usage/data-visualizer/data-sources/#how-to-use-this-data-source-a-practical-example","text":"Let say you want to display a static list of useful links for your organization on the home page. Open the code editor and enter the following data: The data could be look like this: { \"items\" : [ { \"linkName\" : \"My Company Web Site\" , \"linkHref\" : \"http://mycompany.com\" , \"linkOpenBehavior\" : \"_blank\" }, { \"linkName\" : \"My Company Web Site\" , \"linkHref\" : \"http://mycompany.com\" , \"linkOpenBehavior\" : \"_blank\" } ], \"numberOfLinks\" : \"2\" } Now to consume this data, you can either start from an existing layout, or use a custom one. See the templating documentation to know more","title":"How to use this data source: a practical example"},{"location":"usage/data-visualizer/data-sources/#common-settings","text":"Common general options for all data sources Setting Description Default value Do not fetch the data at page load If enabled, the data won't be fetched during the first load of the Web Part. Use this setting if you want to trigger a data fetch only on dynamic external events like selected static filters or a new search box input. False","title":"Common settings"},{"location":"usage/data-visualizer/data-sources/#paging","text":"The paging options are available for all data sources. Setting Description Default value Show paging Hide or display the paging control. Number of items per page Specify the number of items to show per page. Depending of the data source, this value will be handled automatically or manually. For instance, the SharePoint Search and SharePoint CAML will take care of this value automatically. However, the OData data source can use this value by usin the {itemsCountPerPage} token to build a dynamic query (ex: $top={itemsCountPerPage} ). Number of pages to display in range Determines the number of pages to display in range. Hide navigation buttons (prev page, next page) Self explicit. Hide first/last navigation buttons Self explicit. Hide navigation buttons (prev, next, first, last) if they are disabled. Self explicit. Data source paging behaviors Paging is available for all data sources. However, they can handle it differently. Data source Paging behavior Comments SharePoint CAML Dynamic Paging is done calculating the next page link based of the last item ID of the current results set. Therefore, pages are \"discovered\" along the way when browsing, meaning you can only increase the page number by one every time. SharePoint Search Dynamic All page links are pre-calculated since the search engine returns the total items count matching the query regardless the page number. It means you can directly go the last page of results matching the query if you want. OData Dynamic/Static Dynamic when using the @odata.nextLink information if present ('server-side paging') or $skip or $skipToken in the URL to determine the next page link URL. When dynamic, the pages are \"discovered\" along the way when browsing. Static when using the items array directly. Static Data Static Paging is done statically base on the items array","title":"Paging"},{"location":"usage/data-visualizer/data-sources/#caching","text":"For all data sources, you have the option to cache the data to improve performances during the first page load. When enabled, only the first page of initial results is cached . By default, a 5 minutes cache is applied. However, you can set your own duration. At any moment you can clear the cache by clicking on the 'Clear cache' button to start over. You data will be cached on the next page refresh. Notice the data are won't be put in the cache when: A filter is selected. The current page number is greater than 1. The input query text changes. Data in the cache are stored in the browser local storage under the following name: aequosDataVisualizer_DataSourceDataFirstPage_<WebPart instance ID>","title":"Caching"},{"location":"usage/data-visualizer/data-sources/odata/","text":"The OData data source allows you to get data from the following APIs Microsoft Graph : both v1.0 or beta endpoints. SharePoint REST API : the current site or an other site in your tenant. Supports v1.0 or v2.0 , Azure Active Directoy secured API like an Azure function, Azure Web Application, etc. Anonymous API Microsoft Graph \u00b6 The URL supports the following formats. Tokens can also be used to construct your URL: * me * /me * https://graph.microsoft.com/v1.0/me * https://graph.microsoft.com/beta/me * me/events?$filter=startswith(subject, 'ship') Before using a Microsoft Graph resource, you need to ensure you allowed the correct API permissions at tenant level . Because you can't define API permissions through the Web Part package declaratively (i.e webApiPermissions ), we recommend you to use the PnP Office 365 CLI to add correct permissions for your API: o365$ spo serviceprincipal grant add --resource 'Microsoft Graph' --scope 'Mail.Read' SharePoint REST API \u00b6 The URL supports the following formats. Tokens can also be used to construct your URL /_api/ (will target the current root site if you don't specify anything) /_api/ (ex: http://mycompany.sharepoint.com/sites/intranet/_api/lists) /_api/v2.0/sites/{site.id}/drive/list/items?expand=fields(select=FileLeafRef,BaseName,FileRef,FSObjType)&$top={itemsCountPerPage} etc. You can also use query parameters supported by the API Azure Active Directory secured API \u00b6 Follow this procedure to set up your Azure Active Directory application. Don't forget to add at least the ' user impersonation ' permission to be able to call the API endpoint. Before using an AAD secured resource, you need to ensure you allowed the correct API permissions at tenant level . Because you can't define API permissions through the Web Part package declaratively (i.e webApiPermissions ), we recommend you to use the PnP Office 365 CLI to add correct permissions for your API: o365$ spo serviceprincipal grant add --resource '<aad_app_display_name>' --scope 'user_impersonation' Allow your SharePoint domain (ex: https://mycompany.sharepoint.com) as allowed origin in the service or application CORS (Cross-origin resource sharing) settings. Here a procedure for an Azure function . Anonymous \u00b6 You can also call an API endpoint with no specific authentifcation like an Azure HTTP trigger Function with function code. By default, we use the demo OData v4 services provided by https://www.odata.org/odata-services/ to demonstrate the capability. Set HTTP headers or body \u00b6 The only method allowed are GET or POST . For each, you have the ability so set your own HTTP headers. The value must be a valid JSON value : { \"Content-Type\" : \"application/json;odata=verbose\" , \"Accept\" : \"application/json\" , ... } If you specify a POST request, you can also benefit of builtin tokens . { \"ItemsCount\" : \"{itemsCountPerPage}\" , \"MyProperty\" : \"My Value\" , ... } Pagination \u00b6 For each API type, you can control how the results will be paginated in order to improve performances. Dynamic paging \u00b6 Use a Dynamic paging if the underlying API you are using supports paging mechanisms (likely using $top and $skip or $skipToken tokens, for instance Microsoft Graph or SharePoint REST API). Use server-side paging \u00b6 Some APIs like Microsoft Graph or the SharePoint REST API provide a server-side paging functionality (see https://docs.microsoft.com/en-us/graph/paging for more information). Basically, it allows you to paginate results more easily by using a pre-calculated next page link URL instead of building it manually. If checked, the paging will be based on the @odata.nextLink value from the HTTP response. It means when you will click on the next page button, this value will be used to get the next set of results. Thus, the items count and paging information (i.e first page, current page, next page, previous page, and last page) will be determined automatically as long as you move through pages. If unchecked, it will be your URL to be executed to get the next page results. In this last scenario you likely want to provide a dynamic URL using builtin tokens . Example With server-side paging enabled using @odata.nextLink : /me/messages?$top={itemsCountPerPage} or /me/messages?$top=2 Here, the $skip token will be provided automatically in the @odata.nextLink so you don't have to provide it in the URL. Without server-side paging enabled using $top and $skip tokens: <your_sharepoint_site_url>/_api/lists?$top={itemsCountPerPage}&$skip={startRow} If you want to control the paging by yourself, you will have to provide a $skip value manually using builtin tokens. You can use the {itemsCountPerPage} and {startRow} tokens where {startRow} corresponds to the number or items per page * the current page number (start from 0) and {itemsCountPerPage} to the number of items per page configured in the property pane. The URL and the items count will be resolved dynamically based on these token values as long as you move through pages. Because we can't determine the total number of items, in some cases, the last page could be empty. It happens for example when the 'total items count'/'items count per page' is even (i.e. exact same number of items for each page). Static paging \u00b6 If performance is not an issue (i.e for a small ammount of data), you can also set a static paging on your data based on a results array. In this case, you will have to provide the response field to use as the array of items to get the total items count. Then, in the common paging settings, configure the desired number items per page to generate pages dynamically. If you use static paging, don't forget to add a fixed count in your url /me/messages?$top=10 instead of /me/messages?$top={itemsCountPerPage} . Otherwise, you will get only one page every time.","title":"Odata"},{"location":"usage/data-visualizer/data-sources/odata/#microsoft-graph","text":"The URL supports the following formats. Tokens can also be used to construct your URL: * me * /me * https://graph.microsoft.com/v1.0/me * https://graph.microsoft.com/beta/me * me/events?$filter=startswith(subject, 'ship') Before using a Microsoft Graph resource, you need to ensure you allowed the correct API permissions at tenant level . Because you can't define API permissions through the Web Part package declaratively (i.e webApiPermissions ), we recommend you to use the PnP Office 365 CLI to add correct permissions for your API: o365$ spo serviceprincipal grant add --resource 'Microsoft Graph' --scope 'Mail.Read'","title":"Microsoft Graph"},{"location":"usage/data-visualizer/data-sources/odata/#sharepoint-rest-api","text":"The URL supports the following formats. Tokens can also be used to construct your URL /_api/ (will target the current root site if you don't specify anything) /_api/ (ex: http://mycompany.sharepoint.com/sites/intranet/_api/lists) /_api/v2.0/sites/{site.id}/drive/list/items?expand=fields(select=FileLeafRef,BaseName,FileRef,FSObjType)&$top={itemsCountPerPage} etc. You can also use query parameters supported by the API","title":"SharePoint REST API"},{"location":"usage/data-visualizer/data-sources/odata/#azure-active-directory-secured-api","text":"Follow this procedure to set up your Azure Active Directory application. Don't forget to add at least the ' user impersonation ' permission to be able to call the API endpoint. Before using an AAD secured resource, you need to ensure you allowed the correct API permissions at tenant level . Because you can't define API permissions through the Web Part package declaratively (i.e webApiPermissions ), we recommend you to use the PnP Office 365 CLI to add correct permissions for your API: o365$ spo serviceprincipal grant add --resource '<aad_app_display_name>' --scope 'user_impersonation' Allow your SharePoint domain (ex: https://mycompany.sharepoint.com) as allowed origin in the service or application CORS (Cross-origin resource sharing) settings. Here a procedure for an Azure function .","title":"Azure Active Directory secured API"},{"location":"usage/data-visualizer/data-sources/odata/#anonymous","text":"You can also call an API endpoint with no specific authentifcation like an Azure HTTP trigger Function with function code. By default, we use the demo OData v4 services provided by https://www.odata.org/odata-services/ to demonstrate the capability.","title":"Anonymous"},{"location":"usage/data-visualizer/data-sources/odata/#set-http-headers-or-body","text":"The only method allowed are GET or POST . For each, you have the ability so set your own HTTP headers. The value must be a valid JSON value : { \"Content-Type\" : \"application/json;odata=verbose\" , \"Accept\" : \"application/json\" , ... } If you specify a POST request, you can also benefit of builtin tokens . { \"ItemsCount\" : \"{itemsCountPerPage}\" , \"MyProperty\" : \"My Value\" , ... }","title":"Set HTTP headers or body"},{"location":"usage/data-visualizer/data-sources/odata/#pagination","text":"For each API type, you can control how the results will be paginated in order to improve performances.","title":"Pagination"},{"location":"usage/data-visualizer/data-sources/odata/#dynamic-paging","text":"Use a Dynamic paging if the underlying API you are using supports paging mechanisms (likely using $top and $skip or $skipToken tokens, for instance Microsoft Graph or SharePoint REST API).","title":"Dynamic paging"},{"location":"usage/data-visualizer/data-sources/odata/#use-server-side-paging","text":"Some APIs like Microsoft Graph or the SharePoint REST API provide a server-side paging functionality (see https://docs.microsoft.com/en-us/graph/paging for more information). Basically, it allows you to paginate results more easily by using a pre-calculated next page link URL instead of building it manually. If checked, the paging will be based on the @odata.nextLink value from the HTTP response. It means when you will click on the next page button, this value will be used to get the next set of results. Thus, the items count and paging information (i.e first page, current page, next page, previous page, and last page) will be determined automatically as long as you move through pages. If unchecked, it will be your URL to be executed to get the next page results. In this last scenario you likely want to provide a dynamic URL using builtin tokens . Example With server-side paging enabled using @odata.nextLink : /me/messages?$top={itemsCountPerPage} or /me/messages?$top=2 Here, the $skip token will be provided automatically in the @odata.nextLink so you don't have to provide it in the URL. Without server-side paging enabled using $top and $skip tokens: <your_sharepoint_site_url>/_api/lists?$top={itemsCountPerPage}&$skip={startRow} If you want to control the paging by yourself, you will have to provide a $skip value manually using builtin tokens. You can use the {itemsCountPerPage} and {startRow} tokens where {startRow} corresponds to the number or items per page * the current page number (start from 0) and {itemsCountPerPage} to the number of items per page configured in the property pane. The URL and the items count will be resolved dynamically based on these token values as long as you move through pages. Because we can't determine the total number of items, in some cases, the last page could be empty. It happens for example when the 'total items count'/'items count per page' is even (i.e. exact same number of items for each page).","title":"Use server-side paging"},{"location":"usage/data-visualizer/data-sources/odata/#static-paging","text":"If performance is not an issue (i.e for a small ammount of data), you can also set a static paging on your data based on a results array. In this case, you will have to provide the response field to use as the array of items to get the total items count. Then, in the common paging settings, configure the desired number items per page to generate pages dynamically. If you use static paging, don't forget to add a fixed count in your url /me/messages?$top=10 instead of /me/messages?$top={itemsCountPerPage} . Otherwise, you will get only one page every time.","title":"Static paging"},{"location":"usage/data-visualizer/data-sources/sharepoint-caml/","text":"The 'SharePoint CAML' data source allows you to rerieve items uisng a CAML query built using the interative builder or using an XML text. Source configuration \u00b6 A CAML query always apply on a SharePoint list or document library. Thus, you must first select one using the following dropdowns: Setting Description Default value Site The site collection containing the list or document library By default, it uses the current site collection. However, you can disable the checkmark and search for a specific site. This control uses SharePoint search to get sites looking in the Title and Path managed properties. It means if your sites has been newly created it may not appear immediatly until indexed. Web The web containing the list. It can be the root web of the selected site collecion or an other subsite. '/' (root web) List The list where the CAML query will be applied. None. CAML Query configuration \u00b6 To build your CAML query, you have the choice to use the interactive builder or start from scratch using your own XML. See the query schema for CAML to get started. Using the builder \u00b6 Setting Description Default value View Fields The item fields to return from the. They will be available in your templates with the same name. UniqueId EncodedAbsUrl FileRef File_x0020_Type FileLeafRef Name Author Created Order by field An optional field to sort results. If a field is selected, you have the option to select ascending or descending order. None. Search within folders Enable this option if you want to search in folders recursively in your list or document library. False. Filters The filter condition builder. From here you can select: Field : the list to apply the condition Operator : the operator to use. Supported operators are \"Equals,Does not equal, Is greater than, Is less than, Is grater or equal to, Is less or equal to, Is null, Is not null, Begins with and Contains\" . Operator choices are automatically adjusted regarding the selected field type. Value : the value to use for the condition. You can use a plain text/date/taxonomy value here (depending of the selected field type) or use a dynamic token. For the second option, enable the corresponding checkbox to have access to the dynamic tokens menu. Notice that not all available tokens are listed here. If the token you want to use is not is the list, you can add it using the 'Custom value' option and press enter. All supported tokens can be found here Using the advanced mode \u00b6 In advanced mode, you are responsible to wrtie your own CAML query as XML text. You can use tokens {<tokenName>} directly in the text to create dynamic queries. Tip: to help you get started, you can start writing your query using the builder and then switch to 'Advanced mode'. This way, you will see the underlying generated query. However, from the moment where the CAML query text in advanced mode differ from the one generated by the builder, the builder settings will be lost if you switch back to that mode .","title":"Sharepoint caml"},{"location":"usage/data-visualizer/data-sources/sharepoint-caml/#source-configuration","text":"A CAML query always apply on a SharePoint list or document library. Thus, you must first select one using the following dropdowns: Setting Description Default value Site The site collection containing the list or document library By default, it uses the current site collection. However, you can disable the checkmark and search for a specific site. This control uses SharePoint search to get sites looking in the Title and Path managed properties. It means if your sites has been newly created it may not appear immediatly until indexed. Web The web containing the list. It can be the root web of the selected site collecion or an other subsite. '/' (root web) List The list where the CAML query will be applied. None.","title":"Source configuration"},{"location":"usage/data-visualizer/data-sources/sharepoint-caml/#caml-query-configuration","text":"To build your CAML query, you have the choice to use the interactive builder or start from scratch using your own XML. See the query schema for CAML to get started.","title":"CAML Query configuration"},{"location":"usage/data-visualizer/data-sources/sharepoint-caml/#using-the-builder","text":"Setting Description Default value View Fields The item fields to return from the. They will be available in your templates with the same name. UniqueId EncodedAbsUrl FileRef File_x0020_Type FileLeafRef Name Author Created Order by field An optional field to sort results. If a field is selected, you have the option to select ascending or descending order. None. Search within folders Enable this option if you want to search in folders recursively in your list or document library. False. Filters The filter condition builder. From here you can select: Field : the list to apply the condition Operator : the operator to use. Supported operators are \"Equals,Does not equal, Is greater than, Is less than, Is grater or equal to, Is less or equal to, Is null, Is not null, Begins with and Contains\" . Operator choices are automatically adjusted regarding the selected field type. Value : the value to use for the condition. You can use a plain text/date/taxonomy value here (depending of the selected field type) or use a dynamic token. For the second option, enable the corresponding checkbox to have access to the dynamic tokens menu. Notice that not all available tokens are listed here. If the token you want to use is not is the list, you can add it using the 'Custom value' option and press enter. All supported tokens can be found here","title":"Using the builder"},{"location":"usage/data-visualizer/data-sources/sharepoint-caml/#using-the-advanced-mode","text":"In advanced mode, you are responsible to wrtie your own CAML query as XML text. You can use tokens {<tokenName>} directly in the text to create dynamic queries. Tip: to help you get started, you can start writing your query using the builder and then switch to 'Advanced mode'. This way, you will see the underlying generated query. However, from the moment where the CAML query text in advanced mode differ from the one generated by the builder, the builder settings will be lost if you switch back to that mode .","title":"Using the advanced mode"},{"location":"usage/data-visualizer/data-sources/sharepoint-search/","text":"The 'SharePoint Search' data source retrieve items from the SharePoint search engine. The SharePoint search is different from the Microsoft Graph search. Source configuration \u00b6 Setting Description Default value Query text The input query text to pass to the search engine. This setting is not configurable directly in the data source options. To enable it you use go the the third configuration page of the Web Part and selected either a static or dynamic value (Ex: from a connected search box Web Part). See the connection documentation for more information on how to configure this option. This value can be then used in the Query template using the {searchTerms} token. Also this value can be a Keyword Query Language expression (KQL) . None. Query template The search query template to use. It allows you to use dynamic tokens according to the context or specifiy conditions that should always apply to the query. {searchTerms} Result source ID Can be either a builtin result source ID listed in the dropdown or a custom result source GUID that you type. In this case to take effect, you must press 'Enter' to save the value. LocalSharePointResults Selected properties The SharePoint managed properties to retrieve from the results. They can be used with the same name in layouts and slots afterwards. Title Path DefaultEncodingURL FileType HitHighlightedSummary AuthorOWSUSER owstaxidmetadataalltagsinfo Created UniqueID NormSiteID NormListID NormUniqueID ContentTypeId UserName JobTitle WorkPhone Sort order The initial results sort order. You will be able to select only 'Sortable' managed properties here. Make sure the selected properties satisfy this criteria in the SharePoint search schema . None. Refinement filters The initial refinement filters to apply to the query. Both KQL (Keyword Query Language) and FQL ( Fast Query Language ) expressions work here (Ex: KQL FileType:docx , FQL: FileType:equals(\"docx\") ). They will be apply every time to the current search query regarless selected filters from connected Web Parts. Notice: for strign expressions, use \" isntead of ' . None. Language of the search request The language to use for the search request. By default the search request will be made using the current user interface language. This parameter is mainly use to process diacritics, plurals, etc. correctly according to the language. Current UI language. Enable query rules Whether or not apply SharePoint query rules. False. Include OneDrive for Business results Whether or not include OneDrive for business results. False. Enable audience targeting Whether or not results should be targeted according to the audiences that the current user belongs to. More information about modern audiences and how to configure them . False. Enable localization If enabled, the Web Part will try to translate the taxonomy term IDs found in result item properties and refinement values to their corresponding label according to the curent UI language. To get it work, you must map a new refinable managed property associated with ows_taxId_ crawled property and turn this toggle 'on': If enabled and depending how many items are currently displayed, this could be slightly decrease loading performances. To use translated values in your template, you must use the ' Auto + <property_name> ' property format instead of the original property name . For instance, to use translated values of the ' owstaxidmetadataalltagsinfo ' property, you must use the ' Auto owstaxidmetadataalltagsinfo' auto created property. False.","title":"Sharepoint search"},{"location":"usage/data-visualizer/data-sources/sharepoint-search/#source-configuration","text":"Setting Description Default value Query text The input query text to pass to the search engine. This setting is not configurable directly in the data source options. To enable it you use go the the third configuration page of the Web Part and selected either a static or dynamic value (Ex: from a connected search box Web Part). See the connection documentation for more information on how to configure this option. This value can be then used in the Query template using the {searchTerms} token. Also this value can be a Keyword Query Language expression (KQL) . None. Query template The search query template to use. It allows you to use dynamic tokens according to the context or specifiy conditions that should always apply to the query. {searchTerms} Result source ID Can be either a builtin result source ID listed in the dropdown or a custom result source GUID that you type. In this case to take effect, you must press 'Enter' to save the value. LocalSharePointResults Selected properties The SharePoint managed properties to retrieve from the results. They can be used with the same name in layouts and slots afterwards. Title Path DefaultEncodingURL FileType HitHighlightedSummary AuthorOWSUSER owstaxidmetadataalltagsinfo Created UniqueID NormSiteID NormListID NormUniqueID ContentTypeId UserName JobTitle WorkPhone Sort order The initial results sort order. You will be able to select only 'Sortable' managed properties here. Make sure the selected properties satisfy this criteria in the SharePoint search schema . None. Refinement filters The initial refinement filters to apply to the query. Both KQL (Keyword Query Language) and FQL ( Fast Query Language ) expressions work here (Ex: KQL FileType:docx , FQL: FileType:equals(\"docx\") ). They will be apply every time to the current search query regarless selected filters from connected Web Parts. Notice: for strign expressions, use \" isntead of ' . None. Language of the search request The language to use for the search request. By default the search request will be made using the current user interface language. This parameter is mainly use to process diacritics, plurals, etc. correctly according to the language. Current UI language. Enable query rules Whether or not apply SharePoint query rules. False. Include OneDrive for Business results Whether or not include OneDrive for business results. False. Enable audience targeting Whether or not results should be targeted according to the audiences that the current user belongs to. More information about modern audiences and how to configure them . False. Enable localization If enabled, the Web Part will try to translate the taxonomy term IDs found in result item properties and refinement values to their corresponding label according to the curent UI language. To get it work, you must map a new refinable managed property associated with ows_taxId_ crawled property and turn this toggle 'on': If enabled and depending how many items are currently displayed, this could be slightly decrease loading performances. To use translated values in your template, you must use the ' Auto + <property_name> ' property format instead of the original property name . For instance, to use translated values of the ' owstaxidmetadataalltagsinfo ' property, you must use the ' Auto owstaxidmetadataalltagsinfo' auto created property. False.","title":"Source configuration"},{"location":"usage/data-visualizer/data-sources/static-data/","text":"The 'Static data' is the simplest data source you can use. With this data ssource, items are retrieved from a static JSON object that you define and does not require any asynchronous call. When to use this data source? \u00b6 This data source allows you to define your own data schema (i.e. fields) that you can consume in your template. However, to be consumed by templates, the data must follow this JSON strcuture: { \"items\" : [ { \"<any_property>\" : \"<any_value_of_any_type>\" , ... } ], \"<any_other_property>\" : \"<any_value_of_any_type>\" , ... } Don't forget the quotes '\"' for property names. Even if you don't return items, you must specifiy this property. In this case, pass an empty array. How to use this data source: a practical example \u00b6 Let say you want to display a static list of useful links for your organization on the home page. Open the code editor and enter the following data: The data could be look like this: { \"items\" : [ { \"linkName\" : \"My Company Web Site\" , \"linkHref\" : \"http://mycompany.com\" , \"linkOpenBehavior\" : \"_blank\" }, { \"linkName\" : \"My Company Web Site\" , \"linkHref\" : \"http://mycompany.com\" , \"linkOpenBehavior\" : \"_blank\" } ], \"numberOfLinks\" : \"2\" } Now to consume this data, you can either start from an existing layout, or use a custom one. See the templating documentation to know more.","title":"Static data"},{"location":"usage/data-visualizer/data-sources/static-data/#when-to-use-this-data-source","text":"This data source allows you to define your own data schema (i.e. fields) that you can consume in your template. However, to be consumed by templates, the data must follow this JSON strcuture: { \"items\" : [ { \"<any_property>\" : \"<any_value_of_any_type>\" , ... } ], \"<any_other_property>\" : \"<any_value_of_any_type>\" , ... } Don't forget the quotes '\"' for property names. Even if you don't return items, you must specifiy this property. In this case, pass an empty array.","title":"When to use this data source?"},{"location":"usage/data-visualizer/data-sources/static-data/#how-to-use-this-data-source-a-practical-example","text":"Let say you want to display a static list of useful links for your organization on the home page. Open the code editor and enter the following data: The data could be look like this: { \"items\" : [ { \"linkName\" : \"My Company Web Site\" , \"linkHref\" : \"http://mycompany.com\" , \"linkOpenBehavior\" : \"_blank\" }, { \"linkName\" : \"My Company Web Site\" , \"linkHref\" : \"http://mycompany.com\" , \"linkOpenBehavior\" : \"_blank\" } ], \"numberOfLinks\" : \"2\" } Now to consume this data, you can either start from an existing layout, or use a custom one. See the templating documentation to know more.","title":"How to use this data source: a practical example"},{"location":"usage/data-visualizer/layouts/","text":"Builtin layouts \u00b6 By default, the following layouts are provided: Be careful, when you switch the layout in the property pane, all the previous layout properties are lost. We do this to avoid polluting the Web Part property bag with multiple useless configurations. Cards \u00b6 The 'cards' layout allows you to display items as tiles, just like the native 'Highlighted Content' SharePoint Web Part. Setting Description Default value Manage card fields Allows you to define you own values for card placeholder fields. By default, the document card fields come with predefined mappings but you can set your own. As a field value, you can choose either a field property value (from the list or as free text) and without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available. Also, if the field doesn't have the 'Allow HTML' indication flag enabled, it means the value will be always interpreted as text, regardless if you set an HTML value. Otherwise, your value will be interpreted as HTML for those fields (ex: ' Location ' and ' Tags ' placeholder fields). For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ) or @root.slots.<SlotName> to access slot value. If you don't set a value for those fields (i.e an empty value), they won't appear in the UI: . Enable result preview If enabled, display a callout with an interactive preview of the document based on the value specified value for the PreviewUrl current data source slot . False. Show file icon Hide or display the file icon for the result card. The file icon is determined using the FileType slot . True. Compact mode Display cards as compact. False. Preferred number of cards per row Specifiy the preferred number of cards to display per row when the required width space is available . The Web Part will always adjust the number of possible tiles to display depending the available width. It means that if you set this value to '3' but you display the Web Part in small column, only 1 tile will be displayed. 3. Details List \u00b6 The 'details list' layout allows you to display items as a structured list, the same way as a SharePoint document library or list. Setting Description Default value Manage columns Allows you to build you own table view by adding or removing columns dynamically. For each column, you get the following options: Sort order : the order of the column in the table. Column name : the column friendly name to display. Column value : you can choose here either a field from the data source current results set (from the list or as free text) without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all Handlebars helpers from the main template are available and you can also add you own HTML markup in the column value. For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ). Minimum width in px : the minimum width of the column in pixels. Maximum width in px : the maximum width of the column in pixels. Sortable : allows you to sort column values alphabetically when the column header is clicked (ascending or descending). The sort is done statically on the current page results set. Resizable : allows you to resize the column dynamically in display mode. Multiline : if the column column should be multiline. By default only ellipsis (...) will be display for larger text. Show file icon Hide or display the file icon in the first column. Compact mode Display the details list in compact mode Slider \u00b6 The 'slider' layout allows you to display data as as dynamic slider (i.e caroussel). Setting Description Default value Auto play If enabled, slides move automatically every X seconds. True. Auto play duration Move elements every X seconds. 3 seconds. Pause on hover If enabled, pause the slider on mouse hover. True. Number of elements to group together in slides Groups cells together in slides. 3. Show page dots Enable or disable slider navigation. You can adjust the dots position by updating the .flickity-page-dots CSS class. True. Infinite scrolling Enable or disable infinite scrolling on the carousel. False. Slide height (in px) Dynamically set the slides height to adjust your results. 360px. Slide width (in px) Dynamically set the slides width to adjust your results. 318px Simple list \u00b6 The 'simple list' layout display items as a simple list with larger rows, like a search engine results display. Setting Description Default value Show file icon Hide or display the file icon for the result card. The file icon is determined using the FileType slot . True. Show thumbnail If enabled, display a thumbnail for the itme + a callout with an interactive preview of the document on click based on the value specified value for the PreviewUrl current data source slot . False People \u00b6 The 'people' layout display a list of persons with additional information. Typically, this layout is well suited for a people directory. By default, the user profile pictures are fetched from the SharePoint User Profile Service. If your user pictures are stored in Active Directoy, make sure you synchronized them with SharePoint User Profile Service. Otherwise, a placeholder image will be displayed. Setting Description Default value Manage people fields Allows you to define you own values for people placeholder fields. As a field value, you can choose either a field property value (from the list or as free text) and without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available. Also, if the field doesn't have the 'Allow HTML' indication flag enabled, it means the value will be always interpreted as text, regardless if you set an HTML value. Otherwise, your value will be interpreted as HTML for those fields (ex: ' Primary text ' placeholder field). For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ) or @root.slots.<SlotName> to access slot value. If you don't set a value for those fields (i.e an empty value), they won't appear in the UI. Show persona card on hover If enabled, show a person card on hover for the current item. This feature uses Microsoft Graph and Microsoft Graph Toolkit to display information about the user and needs the following API permissions in your tenant to work: User.Read People.Read Contacts.Read User.ReadBasic.All If these permissions are not set, the card won't appear . You can use PnP Office 365 CLI to add correct permissions for this feature: o365$ spo serviceprincipal grant add --resource '<aad_app_display_name>' --scope 'user_impersonation' . Refer to the section below about persona hover card customization . Component size The size of the person item (not only the picture). The more the size is and the more information will be displayed for each item and vice versa. Persona hover card \u00b6 Activating this option may slightly reduce loading performances because the user information are fecthed individually for each user (i.e result). This option shouldn't be used with large page count. Microsoft Graph Toolkit \u00b6 The hover card uses Microsoft Graph Toolkit. This means you can add additional information providing your own template like this: < mgt-person-card inherit-details > < template data-type = \"additional-details\" > < h3 > Stuffed Animal Friends: </ h3 > < ul > < li > Giraffe </ li > < li > lion </ li > < li > Rabbit </ li > </ ul > </ template > </ mgt-person-card > More information here Debug \u00b6 The 'debug' layout allows you to see all relevant data used by layout templates or data sources during render. The template context object exposes the following properties: \"paging\" : { \"currentPageNumber\" : \"<The current selected page number>\" } , \"filters\" : { \"selectedFilters\" : \"<List of currently selected filters>\" , \"filterOperator\" : \"<Operator to use between filters>\" , \"instanceId\" : \"<The connected Data Filters Web Part instance ID>\" , \"filtersConfiguration\" : \"<The filters configuration>\" } , \"inputQueryText\" : \"<The current input query text (Ex: search box text)>\" , \"slots\" : \"<Hashtable of configured slots for the current data source. Usage: {{slot item @root.slots}} >\" , \"theme\" : \"<Current theme variables>\" , \"properties\" : \"<Web Part properties from property bag>\" , \"context\" : { \"site\" : \"<Contextual information for the SharePoint site collection that is hosting the page>\" , \"web\" : \"<Contextual information for the SharePoint web that is hosting the page>\" , \"list\" : \"<Contextual information for the SharePoint list that is hosting the page>\" , \"listItem\" : \"<Contextual information for the SharePoint list item that is hosting the page>\" , \"cultureInfo\" : \"<It provides culture info for the current user of the application>\" , \"user\" : \"<It provides contextual information for the SharePoint user that is accessing the page>\" } , \"data\" : \"<The data source data>\" , \"instanceId\" : \"<The Web Part instance ID>\" , \"utils\" : { \"defaultImage\" : \"<The default image content to display when no thummbnail is available (Base64)>\" } Custom \u00b6 The 'custom' layout is the minimal layout to start with if you want to create your own customized UI from scratch. You can also start from an existing layout. Updating a builtin layout (ex: 'Cards', 'Detail List', etc.) will automatically switch the selected layout to 'Custom' with your modifications as content. All previous custom layout content will be overwritten . You have also the ability to use an external .html file to centralize your customizations. This file must be stored in an accessible location for uses (ex: a SharePoint document library with 'Read' permissions for concerned users). Unless you specify an external file, the template content is stored in the Web Part property bag. Updating the layout HTML template is a good option for minor UI updates (Ex: add a link, update colors, etc.). For more control over the UI, you may want to use the extensibility library feature. Common settings \u00b6 For all layouts, some common settings are available: Setting Description Default value Show a 'See all' link Allows you to specify a 'See all' link at the top right of the Web Part along the Web Part title. You can set the text that will appear plus the link to use. Tokens are supported in the link URL. Disabled. Hide this web part if there's nothing to show If there is no results, the Web Part will remain blank in display mode (title and 'See all' link included). In edit mode, you will see a message indicating there is no results. Disabled. Show results count Hide or display the results count for the current query. Enabled. Use Microsoft Graph Toolkit Enable or disable the Microsoft Graph Toolkit to be used in Handlebars template. Refer to the MGT documentation to see available components. Result types \u00b6 The result types feature gives you the ability to apply a conditional rendering at item level according to data source field values. Not all layouts support the result types feature (ex: Details lsit and slider layouts). Example Given the following conditions, we apply a border with a specific color for each: The result would be like this: The following operators are supported: Equals Not equals Contains StartsWith Greater Or Equal Less Or Equal Less than Greater than Is not null In the case you use a custom template, you can still benefit from this feature following this markup: {{#> resultTypes}} {{!-- The block below will be used as default item template if no result types matched --}} < div class = \"template_result\" > <!-- Your default template markup --> </ div > {{/resultTypes}} Handlebars partials are used behind the scenes and conditions are built dynamically using a recursive if/else structure.","title":"Layouts"},{"location":"usage/data-visualizer/layouts/#builtin-layouts","text":"By default, the following layouts are provided: Be careful, when you switch the layout in the property pane, all the previous layout properties are lost. We do this to avoid polluting the Web Part property bag with multiple useless configurations.","title":"Builtin layouts"},{"location":"usage/data-visualizer/layouts/#cards","text":"The 'cards' layout allows you to display items as tiles, just like the native 'Highlighted Content' SharePoint Web Part. Setting Description Default value Manage card fields Allows you to define you own values for card placeholder fields. By default, the document card fields come with predefined mappings but you can set your own. As a field value, you can choose either a field property value (from the list or as free text) and without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available. Also, if the field doesn't have the 'Allow HTML' indication flag enabled, it means the value will be always interpreted as text, regardless if you set an HTML value. Otherwise, your value will be interpreted as HTML for those fields (ex: ' Location ' and ' Tags ' placeholder fields). For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ) or @root.slots.<SlotName> to access slot value. If you don't set a value for those fields (i.e an empty value), they won't appear in the UI: . Enable result preview If enabled, display a callout with an interactive preview of the document based on the value specified value for the PreviewUrl current data source slot . False. Show file icon Hide or display the file icon for the result card. The file icon is determined using the FileType slot . True. Compact mode Display cards as compact. False. Preferred number of cards per row Specifiy the preferred number of cards to display per row when the required width space is available . The Web Part will always adjust the number of possible tiles to display depending the available width. It means that if you set this value to '3' but you display the Web Part in small column, only 1 tile will be displayed. 3.","title":"Cards"},{"location":"usage/data-visualizer/layouts/#details-list","text":"The 'details list' layout allows you to display items as a structured list, the same way as a SharePoint document library or list. Setting Description Default value Manage columns Allows you to build you own table view by adding or removing columns dynamically. For each column, you get the following options: Sort order : the order of the column in the table. Column name : the column friendly name to display. Column value : you can choose here either a field from the data source current results set (from the list or as free text) without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all Handlebars helpers from the main template are available and you can also add you own HTML markup in the column value. For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ). Minimum width in px : the minimum width of the column in pixels. Maximum width in px : the maximum width of the column in pixels. Sortable : allows you to sort column values alphabetically when the column header is clicked (ascending or descending). The sort is done statically on the current page results set. Resizable : allows you to resize the column dynamically in display mode. Multiline : if the column column should be multiline. By default only ellipsis (...) will be display for larger text. Show file icon Hide or display the file icon in the first column. Compact mode Display the details list in compact mode","title":"Details List"},{"location":"usage/data-visualizer/layouts/#slider","text":"The 'slider' layout allows you to display data as as dynamic slider (i.e caroussel). Setting Description Default value Auto play If enabled, slides move automatically every X seconds. True. Auto play duration Move elements every X seconds. 3 seconds. Pause on hover If enabled, pause the slider on mouse hover. True. Number of elements to group together in slides Groups cells together in slides. 3. Show page dots Enable or disable slider navigation. You can adjust the dots position by updating the .flickity-page-dots CSS class. True. Infinite scrolling Enable or disable infinite scrolling on the carousel. False. Slide height (in px) Dynamically set the slides height to adjust your results. 360px. Slide width (in px) Dynamically set the slides width to adjust your results. 318px","title":"Slider"},{"location":"usage/data-visualizer/layouts/#simple-list","text":"The 'simple list' layout display items as a simple list with larger rows, like a search engine results display. Setting Description Default value Show file icon Hide or display the file icon for the result card. The file icon is determined using the FileType slot . True. Show thumbnail If enabled, display a thumbnail for the itme + a callout with an interactive preview of the document on click based on the value specified value for the PreviewUrl current data source slot . False","title":"Simple list"},{"location":"usage/data-visualizer/layouts/#people","text":"The 'people' layout display a list of persons with additional information. Typically, this layout is well suited for a people directory. By default, the user profile pictures are fetched from the SharePoint User Profile Service. If your user pictures are stored in Active Directoy, make sure you synchronized them with SharePoint User Profile Service. Otherwise, a placeholder image will be displayed. Setting Description Default value Manage people fields Allows you to define you own values for people placeholder fields. As a field value, you can choose either a field property value (from the list or as free text) and without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available. Also, if the field doesn't have the 'Allow HTML' indication flag enabled, it means the value will be always interpreted as text, regardless if you set an HTML value. Otherwise, your value will be interpreted as HTML for those fields (ex: ' Primary text ' placeholder field). For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ) or @root.slots.<SlotName> to access slot value. If you don't set a value for those fields (i.e an empty value), they won't appear in the UI. Show persona card on hover If enabled, show a person card on hover for the current item. This feature uses Microsoft Graph and Microsoft Graph Toolkit to display information about the user and needs the following API permissions in your tenant to work: User.Read People.Read Contacts.Read User.ReadBasic.All If these permissions are not set, the card won't appear . You can use PnP Office 365 CLI to add correct permissions for this feature: o365$ spo serviceprincipal grant add --resource '<aad_app_display_name>' --scope 'user_impersonation' . Refer to the section below about persona hover card customization . Component size The size of the person item (not only the picture). The more the size is and the more information will be displayed for each item and vice versa.","title":"People"},{"location":"usage/data-visualizer/layouts/#persona-hover-card","text":"Activating this option may slightly reduce loading performances because the user information are fecthed individually for each user (i.e result). This option shouldn't be used with large page count.","title":"Persona hover card"},{"location":"usage/data-visualizer/layouts/#microsoft-graph-toolkit","text":"The hover card uses Microsoft Graph Toolkit. This means you can add additional information providing your own template like this: < mgt-person-card inherit-details > < template data-type = \"additional-details\" > < h3 > Stuffed Animal Friends: </ h3 > < ul > < li > Giraffe </ li > < li > lion </ li > < li > Rabbit </ li > </ ul > </ template > </ mgt-person-card > More information here","title":"Microsoft Graph Toolkit"},{"location":"usage/data-visualizer/layouts/#debug","text":"The 'debug' layout allows you to see all relevant data used by layout templates or data sources during render. The template context object exposes the following properties: \"paging\" : { \"currentPageNumber\" : \"<The current selected page number>\" } , \"filters\" : { \"selectedFilters\" : \"<List of currently selected filters>\" , \"filterOperator\" : \"<Operator to use between filters>\" , \"instanceId\" : \"<The connected Data Filters Web Part instance ID>\" , \"filtersConfiguration\" : \"<The filters configuration>\" } , \"inputQueryText\" : \"<The current input query text (Ex: search box text)>\" , \"slots\" : \"<Hashtable of configured slots for the current data source. Usage: {{slot item @root.slots}} >\" , \"theme\" : \"<Current theme variables>\" , \"properties\" : \"<Web Part properties from property bag>\" , \"context\" : { \"site\" : \"<Contextual information for the SharePoint site collection that is hosting the page>\" , \"web\" : \"<Contextual information for the SharePoint web that is hosting the page>\" , \"list\" : \"<Contextual information for the SharePoint list that is hosting the page>\" , \"listItem\" : \"<Contextual information for the SharePoint list item that is hosting the page>\" , \"cultureInfo\" : \"<It provides culture info for the current user of the application>\" , \"user\" : \"<It provides contextual information for the SharePoint user that is accessing the page>\" } , \"data\" : \"<The data source data>\" , \"instanceId\" : \"<The Web Part instance ID>\" , \"utils\" : { \"defaultImage\" : \"<The default image content to display when no thummbnail is available (Base64)>\" }","title":"Debug"},{"location":"usage/data-visualizer/layouts/#custom","text":"The 'custom' layout is the minimal layout to start with if you want to create your own customized UI from scratch. You can also start from an existing layout. Updating a builtin layout (ex: 'Cards', 'Detail List', etc.) will automatically switch the selected layout to 'Custom' with your modifications as content. All previous custom layout content will be overwritten . You have also the ability to use an external .html file to centralize your customizations. This file must be stored in an accessible location for uses (ex: a SharePoint document library with 'Read' permissions for concerned users). Unless you specify an external file, the template content is stored in the Web Part property bag. Updating the layout HTML template is a good option for minor UI updates (Ex: add a link, update colors, etc.). For more control over the UI, you may want to use the extensibility library feature.","title":"Custom"},{"location":"usage/data-visualizer/layouts/#common-settings","text":"For all layouts, some common settings are available: Setting Description Default value Show a 'See all' link Allows you to specify a 'See all' link at the top right of the Web Part along the Web Part title. You can set the text that will appear plus the link to use. Tokens are supported in the link URL. Disabled. Hide this web part if there's nothing to show If there is no results, the Web Part will remain blank in display mode (title and 'See all' link included). In edit mode, you will see a message indicating there is no results. Disabled. Show results count Hide or display the results count for the current query. Enabled. Use Microsoft Graph Toolkit Enable or disable the Microsoft Graph Toolkit to be used in Handlebars template. Refer to the MGT documentation to see available components.","title":"Common settings"},{"location":"usage/data-visualizer/layouts/#result-types","text":"The result types feature gives you the ability to apply a conditional rendering at item level according to data source field values. Not all layouts support the result types feature (ex: Details lsit and slider layouts). Example Given the following conditions, we apply a border with a specific color for each: The result would be like this: The following operators are supported: Equals Not equals Contains StartsWith Greater Or Equal Less Or Equal Less than Greater than Is not null In the case you use a custom template, you can still benefit from this feature following this markup: {{#> resultTypes}} {{!-- The block below will be used as default item template if no result types matched --}} < div class = \"template_result\" > <!-- Your default template markup --> </ div > {{/resultTypes}} Handlebars partials are used behind the scenes and conditions are built dynamically using a recursive if/else structure.","title":"Result types"},{"location":"usage/data-visualizer/layouts/cards/","text":"The 'cards' layout allows you to display items as tiles, just like the native 'Highlighted Content' SharePoint Web Part. Setting Description Default value Manage card fields Allows you to define you own values for card placeholder fields. By default, the document card fields come with predefined mappings but you can set your own. As a field value, you can choose either a field property value (from the list or as free text) and without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available. Also, if the field doesn't have the 'Allow HTML' indication flag enabled, it means the value will be always interpreted as text, regardless if you set an HTML value. Otherwise, your value will be interpreted as HTML for those fields (ex: ' Location ' and ' Tags ' placeholder fields). For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ) or @root.slots.<SlotName> to access slot value. If you don't set a value for those fields (i.e an empty value), they won't appear in the UI: . Enable result preview If enabled, display a callout with an interactive preview of the document based on the value specified value for the PreviewUrl current data source slot . False. Show file icon Hide or display the file icon for the result card. The file icon is determined using the FileType slot . True. Compact mode Display cards as compact. False. Preferred number of cards per row Specifiy the preferred number of cards to display per row when the required width space is available . The Web Part will always adjust the number of possible tiles to display depending the available width. It means that if you set this value to '3' but you display the Web Part in small column, only 1 tile will be displayed. 3.","title":"Cards"},{"location":"usage/data-visualizer/layouts/custom/","text":"The 'custom' layout is the minimal layout to start with if you want to create your own customized UI from scratch. You can also start from an existing layout. Updating a builtin layout (ex: 'Cards', 'Detail List', etc.) will automatically switch the selected layout to 'Custom' with your modifications as content. All previous custom layout content will be overwritten . You have also the ability to use an external .html file to centralize your customizations. This file must be stored in an accessible location for uses (ex: a SharePoint document library with 'Read' permissions for concerned users). Unless you specify an external file, the template content is stored in the Web Part property bag. Updating the layout HTML template is a good option for minor UI updates (Ex: add a link, update colors, etc.). For more control over the UI, you may want to use the extensibility library feature.","title":"Custom"},{"location":"usage/data-visualizer/layouts/debug/","text":"The 'debug' layout allows you to see all relevant data used by layout templates or data sources during render. The template context object exposes the following properties: \"paging\" : { \"currentPageNumber\" : \"<The current selected page number>\" } , \"filters\" : { \"selectedFilters\" : \"<List of currently selected filters>\" , \"filterOperator\" : \"<Operator to use between filters>\" , \"instanceId\" : \"<The connected Data Filters Web Part instance ID>\" , \"filtersConfiguration\" : \"<The filters configuration>\" } , \"inputQueryText\" : \"<The current input query text (Ex: search box text)>\" , \"slots\" : \"<Hashtable of configured slots for the current data source. Usage: {{slot item @root.slots}} >\" , \"theme\" : \"<Current theme variables>\" , \"properties\" : \"<Web Part properties from property bag>\" , \"context\" : { \"site\" : \"<Contextual information for the SharePoint site collection that is hosting the page>\" , \"web\" : \"<Contextual information for the SharePoint web that is hosting the page>\" , \"list\" : \"<Contextual information for the SharePoint list that is hosting the page>\" , \"listItem\" : \"<Contextual information for the SharePoint list item that is hosting the page>\" , \"cultureInfo\" : \"<It provides culture info for the current user of the application>\" , \"user\" : \"<It provides contextual information for the SharePoint user that is accessing the page>\" } , \"data\" : \"<The data source data>\" , \"instanceId\" : \"<The Web Part instance ID>\" , \"utils\" : { \"defaultImage\" : \"<The default image content to display when no thummbnail is available (Base64)>\" }","title":"Debug"},{"location":"usage/data-visualizer/layouts/details-list/","text":"The 'details list' layout allows you to display items as a structured list, the same way as a SharePoint document library or list. Setting Description Default value Manage columns Allows you to build you own table view by adding or removing columns dynamically. For each column, you get the following options: Sort order : the order of the column in the table. Column name : the column friendly name to display. Column value : you can choose here either a field from the data source current results set (from the list or as free text) without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all Handlebars helpers from the main template are available and you can also add you own HTML markup in the column value. For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ). Minimum width in px : the minimum width of the column in pixels. Maximum width in px : the maximum width of the column in pixels. Sortable : allows you to sort column values alphabetically when the column header is clicked (ascending or descending). The sort is done statically on the current page results set. Resizable : allows you to resize the column dynamically in display mode. Multiline : if the column column should be multiline. By default only ellipsis (...) will be display for larger text. Show file icon Hide or display the file icon in the first column. Compact mode Display the details list in compact mode.","title":"Details list"},{"location":"usage/data-visualizer/layouts/people/","text":"The 'people' layout display a list of persons with additional information. Typically, this layout is well suited for a people directory. By default, the user profile pictures are fetched from the SharePoint User Profile Service. If your user pictures are stored in Active Directoy, make sure you synchronized them with SharePoint User Profile Service. Otherwise, a placeholder image will be displayed. Setting Description Default value Manage people fields Allows you to define you own values for people placeholder fields. As a field value, you can choose either a field property value (from the list or as free text) and without any transformation or use an Handlebars expression by clicking on the checkbox next to it. In this case, all helpers from the main template are available. Also, if the field doesn't have the 'Allow HTML' indication flag enabled, it means the value will be always interpreted as text, regardless if you set an HTML value. Otherwise, your value will be interpreted as HTML for those fields (ex: ' Primary text ' placeholder field). For HTML fields you can use the special variable @root.theme to use theme colors (ex: @root.theme.palette.themePrimary ) or @root.slots.<SlotName> to access slot value. If you don't set a value for those fields (i.e an empty value), they won't appear in the UI. Show persona card on hover If enabled, show a person card on hover for the current item. This feature uses Microsoft Graph and Microsoft Graph Toolkit to display information about the user and needs the following API permissions in your tenant to work: User.Read People.Read Contacts.Read User.ReadBasic.All If these permissions are not set, the card won't appear . You can use PnP Office 365 CLI to add correct permissions for this feature: o365$ spo serviceprincipal grant add --resource '<aad_app_display_name>' --scope 'user_impersonation' . Refer to the section below about persona hover card customization . Component size The size of the person item (not only the picture). The more the size is and the more information will be displayed for each item and vice versa. Persona hover card \u00b6 Activating this option may slightly reduce loading performances because the user information are fecthed individually for each user (i.e result). This option shouldn't be used with large page count. Microsoft Graph Toolkit \u00b6 The hover card uses Microsoft Graph Toolkit. This means you can add additional information providing your own template like this: < mgt-person-card inherit-details > < template data-type = \"additional-details\" > < h3 > Stuffed Animal Friends: </ h3 > < ul > < li > Giraffe </ li > < li > lion </ li > < li > Rabbit </ li > </ ul > </ template > </ mgt-person-card > More information here .","title":"People"},{"location":"usage/data-visualizer/layouts/people/#persona-hover-card","text":"Activating this option may slightly reduce loading performances because the user information are fecthed individually for each user (i.e result). This option shouldn't be used with large page count.","title":"Persona hover card"},{"location":"usage/data-visualizer/layouts/people/#microsoft-graph-toolkit","text":"The hover card uses Microsoft Graph Toolkit. This means you can add additional information providing your own template like this: < mgt-person-card inherit-details > < template data-type = \"additional-details\" > < h3 > Stuffed Animal Friends: </ h3 > < ul > < li > Giraffe </ li > < li > lion </ li > < li > Rabbit </ li > </ ul > </ template > </ mgt-person-card > More information here .","title":"Microsoft Graph Toolkit"},{"location":"usage/data-visualizer/layouts/simple-list/","text":"The 'simple list' layout display items as a simple list with larger rows, like a search engine results display. Setting Description Default value Show file icon Hide or display the file icon for the result card. The file icon is determined using the FileType slot . True. Show thumbnail If enabled, display a thumbnail for the itme + a callout with an interactive preview of the document on click based on the value specified value for the PreviewUrl current data source slot . False.","title":"Simple list"},{"location":"usage/data-visualizer/layouts/slider/","text":"The 'slider' layout allows you to display data as as dynamic slider (i.e caroussel). Setting Description Default value Auto play If enabled, slides move automatically every X seconds. True. Auto play duration Move elements every X seconds. 3 seconds. Pause on hover If enabled, pause the slider on mouse hover. True. Number of elements to group together in slides Groups cells together in slides. 3. Show page dots Enable or disable slider navigation. You can adjust the dots position by updating the .flickity-page-dots CSS class. True. Infinite scrolling Enable or disable infinite scrolling on the carousel. False. Slide height (in px) Dynamically set the slides height to adjust your results. 360px. Slide width (in px) Dynamically set the slides width to adjust your results. 318px.","title":"Slider"},{"location":"usage/data-visualizer/layouts/templating/","text":"Preview behavior \u00b6 Light updates \u00b6 Advanced updates \u00b6","title":"Templating"},{"location":"usage/data-visualizer/layouts/templating/#preview-behavior","text":"","title":"Preview behavior"},{"location":"usage/data-visualizer/layouts/templating/#light-updates","text":"","title":"Light updates"},{"location":"usage/data-visualizer/layouts/templating/#advanced-updates","text":"","title":"Advanced updates"},{"location":"usage/search-box/","text":"Search box Web Part \u00b6 The 'Search box' Web Part allows users to enter free text search queries connected to a 'Data Visualizer' Web Part. Configuration \u00b6 Search box settings \u00b6 Setting Description Default value Placeholde text The placeholder text to display in the search box. \"Enter your search terms...\" Send the query to a new page Sends the search query text to a new page. From here you can select the page URL, the open behavior and send method (URL fragment '#' or a query string parameter). False. Query suggestions \u00b6 The query suggestions allows users to easily find relevant query keywords based on their entry: Setting Description Default value Enable query suggestions Enable or disable query suggestions. False. Configure available providers Enable or disable the suggestions providers available for this Web Part. By default, only the \"SharePoint Static search suggestions\" is available (disabled by default). To add values for this provider, refer to the following documentation (caution: it can take up to 24h for changes to take effect). Multiple providers can be enabled at once. Number of suggestions to show per group The number of suggestions to show per group. 10. Connections \u00b6 Optionally, you can set a default query text coming from an other dynamic data source on the page. For instance, connect the search box to a page environment variable like a query string parameter. The value retrieved from a connected data source will be displayed automatically at page load in the text box if present and broadcasted to any other Web Parts connected to the search box Web Part (ex: a 'Data Visualizer' Web Part) resulting to a cascading effect.","title":"Usage"},{"location":"usage/search-box/#search-box-web-part","text":"The 'Search box' Web Part allows users to enter free text search queries connected to a 'Data Visualizer' Web Part.","title":"Search box Web Part"},{"location":"usage/search-box/#configuration","text":"","title":"Configuration"},{"location":"usage/search-box/#search-box-settings","text":"Setting Description Default value Placeholde text The placeholder text to display in the search box. \"Enter your search terms...\" Send the query to a new page Sends the search query text to a new page. From here you can select the page URL, the open behavior and send method (URL fragment '#' or a query string parameter). False.","title":"Search box settings"},{"location":"usage/search-box/#query-suggestions","text":"The query suggestions allows users to easily find relevant query keywords based on their entry: Setting Description Default value Enable query suggestions Enable or disable query suggestions. False. Configure available providers Enable or disable the suggestions providers available for this Web Part. By default, only the \"SharePoint Static search suggestions\" is available (disabled by default). To add values for this provider, refer to the following documentation (caution: it can take up to 24h for changes to take effect). Multiple providers can be enabled at once. Number of suggestions to show per group The number of suggestions to show per group. 10.","title":"Query suggestions"},{"location":"usage/search-box/#connections","text":"Optionally, you can set a default query text coming from an other dynamic data source on the page. For instance, connect the search box to a page environment variable like a query string parameter. The value retrieved from a connected data source will be displayed automatically at page load in the text box if present and broadcasted to any other Web Parts connected to the search box Web Part (ex: a 'Data Visualizer' Web Part) resulting to a cascading effect.","title":"Connections"}]}